///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        25/May/2020  15:49:24 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\Source\Coordinator.c                  /
//    Command line       =  -f F:\zigbee程序\zigbee_easy_module\zigbee_easy_m /
//                          odule\Projects\zstack\zigbee_easy_module\zigbee_e /
//                          asy_module_APP\CC2530DB\..\..\..\Tools\CC2530DB\f /
//                          8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func        /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f F:\zigbee程序\zigbee_easy_module\zigbee_easy_m /
//                          odule\Projects\zstack\zigbee_easy_module\zigbee_e /
//                          asy_module_APP\CC2530DB\..\..\..\Tools\CC2530DB\f /
//                          8wConfig.cfg (-DZIGBEEPRO -DSECURE=0              /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x04000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\zigbee程序\zigbee_easy_ /
//                          module\zigbee_easy_module\Projects\zstack\zigbee_ /
//                          easy_module\zigbee_easy_module_APP\Source\Coordin /
//                          ator.c -D BUILD_ALL_DEVICES -D HOLD_AUTO_START    /
//                          -D LCD_SUPPORTED -D HAL_UART=FALSE -lC            /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\DemoEB\List\ -lA             /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\DemoEB\List\                 /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\DemoEB\Obj\ -e               /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\ -I                          /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\..\Source\ -I                /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\..\..\..\ZMain\TI2530DB\ -I  /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\..\..\..\..\..\Components\ha /
//                          l\include\ -I F:\zigbee程序\zigbee_easy_module\zi /
//                          gbee_easy_module\Projects\zstack\zigbee_easy_modu /
//                          le\zigbee_easy_module_APP\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\target\CC2530EB\ -I               /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\..\..\..\..\..\Components\ma /
//                          c\include\ -I F:\zigbee程序\zigbee_easy_module\zi /
//                          gbee_easy_module\Projects\zstack\zigbee_easy_modu /
//                          le\zigbee_easy_module_APP\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\high_level\ -I                    /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\..\..\..\..\..\Components\ma /
//                          c\low_level\srf04\ -I F:\zigbee程序\zigbee_easy_m /
//                          odule\zigbee_easy_module\Projects\zstack\zigbee_e /
//                          asy_module\zigbee_easy_module_APP\CC2530DB\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\single_ch /
//                          ip\ -I F:\zigbee程序\zigbee_easy_module\zigbee_ea /
//                          sy_module\Projects\zstack\zigbee_easy_module\zigb /
//                          ee_easy_module_APP\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mt\ -I F:\zigbee程序\zigbee_easy_module\zigb /
//                          ee_easy_module\Projects\zstack\zigbee_easy_module /
//                          \zigbee_easy_module_APP\CC2530DB\..\..\..\..\..\C /
//                          omponents\osal\include\ -I                        /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\..\..\..\..\..\Components\se /
//                          rvices\saddr\ -I F:\zigbee程序\zigbee_easy_module /
//                          \zigbee_easy_module\Projects\zstack\zigbee_easy_m /
//                          odule\zigbee_easy_module_APP\CC2530DB\..\..\..\.. /
//                          \..\Components\services\sdata\ -I                 /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\..\..\..\..\..\Components\st /
//                          ack\af\ -I F:\zigbee程序\zigbee_easy_module\zigbe /
//                          e_easy_module\Projects\zstack\zigbee_easy_module\ /
//                          zigbee_easy_module_APP\CC2530DB\..\..\..\..\..\Co /
//                          mponents\stack\nwk\ -I F:\zigbee程序\zigbee_easy_ /
//                          module\zigbee_easy_module\Projects\zstack\zigbee_ /
//                          easy_module\zigbee_easy_module_APP\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\sapi\ -I               /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\..\..\..\..\..\Components\st /
//                          ack\sec\ -I F:\zigbee程序\zigbee_easy_module\zigb /
//                          ee_easy_module\Projects\zstack\zigbee_easy_module /
//                          \zigbee_easy_module_APP\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\sys\ -I                           /
//                          F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\..\..\..\..\..\Components\st /
//                          ack\zdo\ -I F:\zigbee程序\zigbee_easy_module\zigb /
//                          ee_easy_module\Projects\zstack\zigbee_easy_module /
//                          \zigbee_easy_module_APP\CC2530DB\..\..\..\..\..\C /
//                          omponents\zmac\ -I F:\zigbee程序\zigbee_easy_modu /
//                          le\zigbee_easy_module\Projects\zstack\zigbee_easy /
//                          _module\zigbee_easy_module_APP\CC2530DB\..\..\..\ /
//                          ..\..\Components\zmac\f8w\ -Ohz                   /
//                          --require_prototypes                              /
//    List file          =  F:\zigbee程序\zigbee_easy_module\zigbee_easy_modu /
//                          le\Projects\zstack\zigbee_easy_module\zigbee_easy /
//                          _module_APP\CC2530DB\DemoEB\List\Coordinator.s51  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Coordinator

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ADD_XSTACK_DISP0_16
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_16
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??To_string?relay
        FUNCTION ??To_string?relay,0203H
        PUBLIC ??Uart_Read?relay
        FUNCTION ??Uart_Read?relay,0203H
        PUBLIC ??Uart_Write?relay
        FUNCTION ??Uart_Write?relay,0203H
        PUBLIC ??node_confirm?relay
        FUNCTION ??node_confirm?relay,0203H
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 68, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC To_string
        FUNCTION To_string,0203H
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Uart_Read
        FUNCTION Uart_Read,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 68, STACK
        PUBLIC Uart_Write
        FUNCTION Uart_Write,021203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 265, STACK
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBLIC child_num
        PUBLIC cntnum
        PUBLIC mypanid
        PUBLIC node_confirm
        FUNCTION node_confirm,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC sendback_flag
        PUBLIC time_cnt
        PUBLIC tmpshortaddr
        PUBLIC uart_rd_enableflag
        PUBLIC uart_rdata
        PUBLIC uart_rdlen
        PUBLIC uart_rdlenrightflag
        PUBLIC uart_rdlentemp
        PUBLIC uart_rdsuccessflag
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
HalUARTOpen         SYMBOL "HalUARTOpen"
HalUARTWrite        SYMBOL "HalUARTWrite"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_set_event      SYMBOL "osal_set_event"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
NLME_UpdateNV       SYMBOL "NLME_UpdateNV"
osal_nv_item_len    SYMBOL "osal_nv_item_len"
osal_nv_write       SYMBOL "osal_nv_write"
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
HalUARTRead         SYMBOL "HalUARTRead"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
osal_memcpy         SYMBOL "osal_memcpy"
AF_DataRequest      SYMBOL "AF_DataRequest"
strcmp              SYMBOL "strcmp"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??Hal_UART_RxBufLen?relay SYMBOL "?relay", Hal_UART_RxBufLen
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_UpdateNV?relay SYMBOL "?relay", NLME_UpdateNV
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_nv_item_len?relay SYMBOL "?relay", osal_nv_item_len
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??strcmp?relay      SYMBOL "?relay", strcmp
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
To_string           SYMBOL "To_string"
??To_string?relay   SYMBOL "?relay", To_string
Uart_Read           SYMBOL "Uart_Read"
??Uart_Read?relay   SYMBOL "?relay", Uart_Read
Uart_Write          SYMBOL "Uart_Write"
??Uart_Write?relay  SYMBOL "?relay", Uart_Write
node_confirm        SYMBOL "node_confirm"
??node_confirm?relay SYMBOL "?relay", node_confirm

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 265, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_UpdateNV
        FUNCTION NLME_UpdateNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcmp
        FUNCTION strcmp,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??Hal_UART_RxBufLen?relay
        FUNCTION ??Hal_UART_RxBufLen?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_UpdateNV?relay
        FUNCTION ??NLME_UpdateNV?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_nv_item_len?relay
        FUNCTION ??osal_nv_item_len?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??strcmp?relay
        FUNCTION ??strcmp?relay,00H
        EXTERN _NIB
        EXTERN zgConfigPANID

// F:\zigbee程序\zigbee_easy_module\zigbee_easy_module\Projects\zstack\zigbee_easy_module\zigbee_easy_module_APP\Source\Coordinator.c
//    1 /**************************************************************************************************
//    2   Filename:       Coordinator.c
//    3   Revised:        $Date: 2020.02.14 $
//    4 
//    5   Description:    Sample Application (no Profile).
//    6 
//    7 *********************************************************************/
//    8 
//    9 /*********************************************************************
//   10  * INCLUDES
//   11  */
//   12 #include "OSAL.h"
//   13 #include "AF.h"
//   14 #include "ZDApp.h"
//   15 #include "ZDObject.h"
//   16 #include "ZDProfile.h"
//   17 #include <String.h>
//   18 #include <hal_types.h>
//   19 #include "sapi.h"
//   20 #include "MT_SYS.h"
//   21 #include "OSAL_Nv.h"
//   22 #include "SampleApp.h"
//   23 #include "DebugTrace.h"
//   24 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1
//   25 
//   26 /* HAL */
//   27 #include "hal_lcd.h"
//   28 #include "hal_led.h"
//   29 #include "hal_key.h"
//   30 #include "hal_uart.h"
//   31 
//   32 #define CHILD_NUM_EVENT      0x01
//   33 #define CO_RESET_EVENT       0x02
//   34 #define CHANGE_PANID_EVT     0x03
//   35 
//   36 #define SAMPLEAPP_RESET_EVT  0x0F
//   37 /*********************************************************************
//   38  * GLOBAL VARIABLES
//   39  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   40 uint8 uart_rdata[128];         //数据暂存器，最多能够缓存40个字节
uart_rdata:
        DS 128
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   41 uint8 uart_rdlenrightflag=0; //数据长度校验位正确标志
uart_rdlenrightflag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   42 uint8 uart_rdsuccessflag=0;  //成功接收到数据信息标志位
uart_rdsuccessflag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   43 uint8 uart_rd_enableflag=0;   //接受状态标记
uart_rd_enableflag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   44 uint8 uart_rdlen=0;          //有用信息的数据长度
uart_rdlen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   45 uint8 uart_rdlentemp=0;      //用来记录已读数据长度
uart_rdlentemp:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   46 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   47 uint8 child_num=0; 
child_num:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   48 uint16 time_cnt=0;
time_cnt:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   49 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   50 uint16 mypanid;
mypanid:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   51 uint8 tmpshortaddr[4];
tmpshortaddr:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   52 uint8 cntnum=0;
cntnum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   53 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   54 uint8 sendback_flag=0;
sendback_flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   55 
//   56 //sendBackData_t  *send_pMsg;
//   57 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   58 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 0
//   59 {
//   60   SAMPLEAPP_CLUSTERID
//   61 };
//   62 
//   63 //描述zigbee节点设备（设备描述符）

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   64 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 0
        DATA16
        DW 0H
//   65 {
//   66   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//   67   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//   68   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   69   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   70   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//   71   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   72   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//   73   0,                               //  uint8  AppNumInClusters;
//   74   (cId_t *)NULL                    //  uint8 *pAppInClusterList;
//   75 };
//   76 
//   77 //********************************************************************

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   78 endPointDesc_t SampleApp_epDesc;//节点描述符
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   79 uint8 SampleApp_TaskID;   //任务优先级
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   80 uint8 SampleApp_TransID;  // 数据发送序列号
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   81 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   82 
//   83 /*********************************************************************
//   84  * LOCAL FUNCTIONS
//   85  */
//   86 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//   87 void SampleApp_SendTheMessage( void );
//   88 void Uart_Read( uint8 port, uint8 event );
//   89 void Uart_Write(uint8 cmd,uint8 port,uint8 *buf, uint16 len);
//   90 void ShowInfo(void);
//   91 void To_string(uint8 * dest, char * src, uint8 length);
//   92 void node_confirm(void);
//   93 void Send_data_back( afIncomingMSGPacket_t *pkt ,uint8* tmpbuffer);
//   94 /*********************************************************************
//   95  * @fn      SampleApp_Init
//   96  *
//   97  * @brief   Initialization function for the Generic App Task.
//   98  *          This is called during initialization and should contain
//   99  *          any application specific initialization (ie. hardware
//  100  *          initialization/setup, table initialization, power up
//  101  *          notificaiton ... ).
//  102  *
//  103  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  104  *                    used to send messages and set timers.
//  105  *
//  106  * @return  none
//  107  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  108 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  109 { 
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
//  110   halUARTCfg_t uartConfig;
//  111   SampleApp_TaskID                   = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  112   SampleApp_TransID                  = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  113   // Fill out the endpoint description.
//  114   SampleApp_epDesc.endPoint          = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  115   SampleApp_epDesc.task_id           = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  116   SampleApp_epDesc.simpleDesc        = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  117   SampleApp_epDesc.latencyReq        = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  118   // Register the endpoint description with the AF
//  119   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  120   //------------------------配置串口---------------------------------
//  121   uartConfig.configured=TRUE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  122   uartConfig.baudRate=HAL_UART_BR_115200;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  123   uartConfig.flowControl=FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  124   uartConfig.callBackFunc=Uart_Read;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??Uart_Read?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??Uart_Read?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  125   HalUARTOpen(0,&uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  126   HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n"));//串口发送
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xd
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
        MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  127   //Uart_Write("uartinit",sizeof("uartinit")-1);
//  128   //-----------------------------------------------------------------
//  129 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  130 
//  131 /*********************************************************************
//  132  * @fn      SampleApp_ProcessEvent
//  133  *
//  134  * @brief   Generic Application Task event processor.  This function
//  135  *          is called to process all events for the task.  Events
//  136  *          include timers, messages and any other user defined events.
//  137  *
//  138  * @param   task_id  - The OSAL assigned task ID.
//  139  * @param   events - events to process.  This is a bit map and can
//  140  *                   contain more than one event.
//  141  *
//  142  * @return  none
//  143  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  144 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  145 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, node_confirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, NLME_UpdateNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  146   afIncomingMSGPacket_t *MSGpkt;
//  147   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  148   {
//  149     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  150     
//  151     while ( MSGpkt )
//  152     {
//  153       switch ( MSGpkt->hdr.event )
//  154       {
//  155        case AF_INCOMING_MSG_CMD:
//  156           SampleApp_MessageMSGCB( MSGpkt );
//  157           break;
//  158           
//  159        case ZDO_STATE_CHANGE:
//  160            SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  161            if(SampleApp_NwkState==DEV_COORD_STARTING)
        XRL     A,#0x8
        JNZ     ??SampleApp_ProcessEvent_3
//  162           {
//  163             HalUARTWrite(0,"cost",4);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "cost">` & 0xff
        MOV     R3,#(`?<Constant "cost">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  164           }
//  165           if(SampleApp_NwkState==DEV_ZB_COORD)
??SampleApp_ProcessEvent_3:
        MOV     DPTR,#SampleApp_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JNZ     ??SampleApp_ProcessEvent_4
//  166           {
//  167             HalUARTWrite(0,"zbco",4);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "zbco">` & 0xff
        MOV     R3,#(`?<Constant "zbco">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  168             osal_set_event(SampleApp_TaskID,CHILD_NUM_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  169           }
//  170           break;
//  171 		  
//  172         default:
//  173           break;
//  174       }
//  175       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  176       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_4
//  177     }
//  178     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_7:
        MOV     R3,A
        LJMP    ??SampleApp_ProcessEvent_8 & 0xFFFF
//  179   }
//  180   if(events & CHILD_NUM_EVENT)
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_9
//  181   {
//  182     
//  183     if(time_cnt==CO_RESET_TIME){
        MOV     DPTR,#time_cnt
        MOVX    A,@DPTR
        XRL     A,#0x10
        JNZ     ??SampleApp_ProcessEvent_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xe
??SampleApp_ProcessEvent_10:
        JNZ     ??SampleApp_ProcessEvent_11
//  184       node_confirm();
        ; Setup parameters for call to function node_confirm
        LCALL   ??node_confirm?relay
//  185     }
//  186     time_cnt++;
??SampleApp_ProcessEvent_11:
        MOV     DPTR,#time_cnt
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  187     osal_start_timerEx(SampleApp_TaskID,CHILD_NUM_EVENT,1000);//定时函数
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        LCALL   ?Subroutine8 & 0xFFFF
//  188     return (events ^ CHILD_NUM_EVENT);
??CrossCallReturnLabel_28:
        MOV     A,R6
        XRL     A,#0x1
??SampleApp_ProcessEvent_12:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_7
//  189   }
//  190   if(events & CO_RESET_EVENT)
??SampleApp_ProcessEvent_9:
        ANL     A,#0x2
        JZ      ??SampleApp_ProcessEvent_13
//  191   {
//  192     
//  193     if(child_num==0){
        MOV     DPTR,#child_num
        MOVX    A,@DPTR
        JNZ     ??SampleApp_ProcessEvent_14
//  194       SystemReset();
        CLR     0xa8.7
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??SampleApp_ProcessEvent_15:
        SJMP    ??SampleApp_ProcessEvent_15
//  195     }
//  196     child_num=0;
??SampleApp_ProcessEvent_14:
        CLR     A
        MOVX    @DPTR,A
//  197     return (events ^ CO_RESET_EVENT);
        MOV     A,R6
        XRL     A,#0x2
        MOV     R2,A
        SJMP    ??SampleApp_ProcessEvent_8
//  198   }
//  199   if(events & SAMPLEAPP_RESET_EVT)
??SampleApp_ProcessEvent_13:
        MOV     A,R6
        ANL     A,#0xf
        JZ      ??SampleApp_ProcessEvent_16
//  200   {
//  201     SystemReset();
        CLR     0xa8.7
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??SampleApp_ProcessEvent_17:
        SJMP    ??SampleApp_ProcessEvent_17
//  202   }
//  203   
//  204   if(events & CHANGE_PANID_EVT)
??SampleApp_ProcessEvent_16:
        MOV     A,R6
        ANL     A,#0x3
        JZ      ??SampleApp_ProcessEvent_18
//  205   {
//  206         _NIB.nwkPanId = mypanid;
        MOV     DPTR,#mypanid
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#_NIB + 33
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine5 & 0xFFFF
//  207         NLME_UpdateNV(0x01);
//  208         osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &zgConfigPANID);
??CrossCallReturnLabel_6:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#-0x7d
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7d
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  209         osal_start_timerEx( SampleApp_TaskID,
//  210                       SAMPLEAPP_RESET_EVT,
//  211                       2000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0xf
        LCALL   ?Subroutine8 & 0xFFFF
//  212         return (events ^ CHANGE_PANID_EVT);
??CrossCallReturnLabel_29:
        MOV     A,R6
        XRL     A,#0x3
        SJMP    ??SampleApp_ProcessEvent_12
//  213   }       
//  214   return 0;
??SampleApp_ProcessEvent_18:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_8:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE _A_IEN0
        REQUIRE WDCTL
//  215 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     R3,#0x0
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11
//  216 
//  217 /*********************************************************************
//  218  * LOCAL FUNCTIONS
//  219  */
//  220 /*********************************************************************
//  221  * @fn      Uart_Read
//  222  *
//  223  * @brief   
//  224  *
//  225  * @param   none
//  226  *
//  227  * @return  none
//  228  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  229 void Uart_Read(uint8 port, uint8 event)
Uart_Read:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function Uart_Read
        CODE
//  230 {
        FUNCALL Uart_Read, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, To_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, To_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, Uart_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, NLME_UpdateNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Uart_Read, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 48
        MOV     A,#-0x30
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 59)
//  231 //**********串口协议解析用的变量************************************	
//  232   uint8  ch,check_temp;
//  233   uart_rdlenrightflag=0;          
??Uart_Read_0:
        MOV     DPTR,#uart_rdlenrightflag
        CLR     A
        MOVX    @DPTR,A
//  234   uart_rdsuccessflag=0;           
        MOV     DPTR,#uart_rdsuccessflag
??Uart_Read_1:
        MOVX    @DPTR,A
//  235   uart_rd_enableflag=0;           
        MOV     DPTR,#uart_rd_enableflag
        MOVX    @DPTR,A
//  236   uart_rdlen=0;               
        MOV     DPTR,#uart_rdlen
        MOVX    @DPTR,A
//  237   uart_rdlentemp=0;
        MOV     DPTR,#uart_rdlentemp
        SJMP    ??Uart_Read_2
//  238 		
//  239 //**********发送数据用到的变量**************************************	
//  240   afAddrType_t my_DstAddr;//发送函数结构体初始化
//  241 		
//  242 //*****************临时变量*****************************************		
//  243   RFTX rftx;//读取设备状态结构体		
//  244   uint8 PAN_ID[2];//PANID temp
//  245   uint8 SHORT[2];//SHORTADDR temp
//  246   uint16 SHORTADDR_temp;//SHORTADDR temp
//  247   uint8 Change_panid[4];//CHANGEPANID temp
//  248   uint8 brodata[4];
//  249   uint8 mychannel;
//  250 
//  251   while (Hal_UART_RxBufLen(0))
//  252   {
//  253         HalUARTRead(0,&ch,1);
//  254         if(ch==0xac)
//  255         {
//  256 			uart_rd_enableflag=1;
??Uart_Read_3:
        MOV     A,#0x1
??Uart_Read_4:
        MOVX    @DPTR,A
//  257 			uart_rdlentemp++;
        MOV     DPTR,#uart_rdlentemp
        MOVX    A,@DPTR
        INC     A
??Uart_Read_2:
        MOVX    @DPTR,A
//  258         }
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,#0x0
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??Uart_Read_5 & 0xFFFF
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xac
        MOV     DPTR,#uart_rd_enableflag
        JZ      ??Uart_Read_3
//  259 	else if(uart_rd_enableflag==1&&uart_rdlentemp==1)
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??Uart_Read_6 & 0xFFFF
        MOV     DPTR,#uart_rdlentemp
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Uart_Read_7
//  260 	{
//  261 		uart_rdlen=ch;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPTR,#uart_rdlen
        MOVX    @DPTR,A
//  262 		uart_rdlentemp++;
        MOV     DPTR,#uart_rdlentemp
        MOV     A,#0x2
        SJMP    ??Uart_Read_2
//  263 	}
??Uart_Read_7:
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x2
        JC      ??Uart_Read_8
        MOV     DPTR,#uart_rdlen
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#uart_rdlentemp
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,#0x0
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??Uart_Read_8
//  264 	else if(uart_rd_enableflag==1&&uart_rdlentemp>=2&&uart_rdlentemp<=uart_rdlen+1)
//  265 	{
//  266 		uart_rdata[uart_rdlentemp-2]=ch;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#uart_rdlentemp
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#(uart_rdata + 254) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((uart_rdata - 2) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LJMP    ??Uart_Read_4 & 0xFFFF
//  267 		uart_rdlentemp++;
//  268 	}
??Uart_Read_8:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#uart_rdlen
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        XRL     A,R2
        JNZ     ??Uart_Read_9
        MOV     A,R1
??Uart_Read_9:
        JNZ     ??Uart_Read_10
//  269 	else if(uart_rd_enableflag==1&&uart_rdlentemp==uart_rdlen+2)
//  270 	{
//  271 		check_temp = ~uart_rdlen;
//  272 		if(ch==check_temp){
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#uart_rdlen
        MOVX    A,@DPTR
        CPL     A
        XRL     A,R0
        JNZ     ??Uart_Read_11
//  273 			uart_rdlenrightflag=1;
        MOV     DPTR,#uart_rdlenrightflag
        LJMP    ??Uart_Read_3 & 0xFFFF
//  274                         uart_rdlentemp++;
//  275 		}
//  276 		else{
//  277 			uart_rdlenrightflag=0;          
??Uart_Read_11:
        LJMP    ??Uart_Read_0 & 0xFFFF
//  278 			uart_rdsuccessflag=0;           
//  279 			uart_rd_enableflag=0;           
//  280 			uart_rdlen=0;               
//  281 			uart_rdlentemp=0;		
//  282 		}
//  283     }
??Uart_Read_10:
        MOVX    A,@DPTR
        ADD     A,#0x3
        INC     R0
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        XRL     A,R2
        JNZ     ??Uart_Read_12
        MOV     A,R1
??Uart_Read_12:
        JNZ     ??Uart_Read_6
//  284 	else if(uart_rd_enableflag==1&&uart_rdlentemp==uart_rdlen+3){
//  285 		if(( ch==0xef )&&( uart_rdlenrightflag==1 )){
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xef
        JNZ     ??Uart_Read_11
        MOV     DPTR,#uart_rdlenrightflag
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Uart_Read_11
//  286 			uart_rdsuccessflag=1;
        MOV     DPTR,#uart_rdsuccessflag
        MOV     A,#0x1
        MOVX    @DPTR,A
//  287 			uart_rdlentemp=0;
        MOV     DPTR,#uart_rdlentemp
        CLR     A
        LJMP    ??Uart_Read_2 & 0xFFFF
//  288 		}
//  289 		else{
//  290 			uart_rdlenrightflag=0;          
//  291 			uart_rdsuccessflag=0;           
//  292 			uart_rd_enableflag=0;           
//  293 			uart_rdlen=0;               
//  294 			uart_rdlentemp=0;
//  295 		}
//  296 	}
//  297         else{           
//  298                 uart_rdsuccessflag=0;           
??Uart_Read_6:
        MOV     DPTR,#uart_rdsuccessflag
        CLR     A
        LJMP    ??Uart_Read_1 & 0xFFFF
//  299                 uart_rd_enableflag=0;           
//  300                 uart_rdlen=0;               
//  301                 uart_rdlentemp=0;
//  302         }
//  303   }
//  304   
//  305   if(uart_rdsuccessflag==1){
??Uart_Read_5:
        MOV     DPTR,#uart_rdsuccessflag
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??Uart_Read_13 & 0xFFFF
//  306           uart_rdsuccessflag=0;
        CLR     A
        MOVX    @DPTR,A
//  307           
//  308           SHORTADDR_temp=NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  309           To_string(rftx.myNWK,(uint8 *)&SHORTADDR_temp,2);
        ; Setup parameters for call to function To_string
        MOV     R1,#0x2
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??To_string?relay
//  310           To_string(rftx.myMAC,NLME_GetExtAddr(),8);
        ; Setup parameters for call to function To_string
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x8
        MOV     R1,A
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??To_string?relay
//  311           
//  312 /************************************************************************************
//  313 **************************自定协议AC LEN CMD DATA ~LEN EF***************************
//  314 #define SEND_PANID                  0xFA  //读取PANID
//  315 #define SEND_CHANNEL                0xFB  //读取信道
//  316 #define SEND_SHORTADDR              0xFC  //读取短地址
//  317 #define SEND_MACADDR                0xFD  //读取MAC地址
//  318 #define SEND_DEVTYPE                0xFE  //读取设备类型
//  319 #define SEND_NWKSTD                 0xFF  //读取网络状态
//  320         
//  321 #define SEND_DATA                   0xF1  //外发数据(协调器为广播，节点为点播至协调器)
//  322 #define SEND_DATA_P2P               0xF2  //点播数据(协调器专有)
//  323 
//  324 #define CHANGE_PANID                0xE1  //更改PANID
//  325 #define CHANGE_CHANNEL              0xE2  //更改信道
//  326   
//  327 #define CNTDEVNUM                   0xD1  //统计入网设备数量(未实现)
//  328         
//  329 #define SEND_RESET                  0xDF  //复位
//  330 ************************************************************************************/         
//  331         
//  332      switch(uart_rdata[0]){
        MOV     DPTR,#uart_rdata
        MOVX    A,@DPTR
        ADD     A,#0x2f
        JNZ     $+5
        LJMP    ??Uart_Read_14 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Uart_Read_15 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Uart_Read_16 & 0xFFFF
        ADD     A,#-0xc
        JNZ     $+5
        LJMP    ??Uart_Read_17 & 0xFFFF
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??Uart_Read_18 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Uart_Read_19 & 0xFFFF
        ADD     A,#-0xf
        JNZ     $+5
        LJMP    ??Uart_Read_20 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Uart_Read_21 & 0xFFFF
        ADD     A,#-0x8
        JZ      ??Uart_Read_22
        DEC     A
        JZ      ??Uart_Read_23
        DEC     A
        JNZ     $+5
        LJMP    ??Uart_Read_24 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Uart_Read_25 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Uart_Read_26 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Uart_Read_27 & 0xFFFF
        SJMP    ??Uart_Read_13
//  333 /**********************************************************************************
//  334  *****************************读取设备信息*****************************************
//  335             
//  336            SEND_PANID                  0xFA  //读取PANID
//  337            SEND_CHANNEL                0xFB  //读取信道
//  338            SEND_SHORTADDR              0xFC  //读取短地址
//  339            SEND_MACADDR                0xFD  //读取MAC地址
//  340            SEND_DEVTYPE                0xFE  //读取设备类型
//  341            SEND_NWKSTD                 0xFF  //读取网络状态
//  342             
//  343  *****************  UART back data: 0xac len cmd * ~len 0xef   ********************
//  344  **********************************************************************************
//  345 */    
//  346           case SEND_PANID:
//  347                 osal_memcpy(&mypanid,&_NIB.nwkPanId,sizeof(uint16));
??Uart_Read_22:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(_NIB + 33) & 0xff
        MOV     ?V0 + 1,#((_NIB + 33) >> 8) & 0xff
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#mypanid & 0xff
        MOV     R3,#(mypanid >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 59)
//  348                 PAN_ID[1]=0xFF&mypanid;
        MOV     DPTR,#mypanid
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  349                 PAN_ID[0]=0xFF&(mypanid>>8);
        MOV     DPTR,#mypanid + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine6 & 0xFFFF
//  350                 Uart_Write(0xFA,0,PAN_ID,2);
??CrossCallReturnLabel_8:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R1,#-0x6
??Uart_Read_28:
        LCALL   ??Uart_Write?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 59)
//  351             break;  
//  352             
//  353           case SEND_CHANNEL:
//  354 		Uart_Write(0xFB,0,&_NIB.nwkLogicalChannel,1);
//  355             break;
//  356             
//  357           case SEND_SHORTADDR:
//  358                 SHORT[1]=0xFF&SHORTADDR_temp;
//  359                 SHORT[0]=0xFF&(SHORTADDR_temp>>8);
//  360                 Uart_Write(0xFC,0,SHORT,2);
//  361             break;
//  362             
//  363           case SEND_MACADDR:
//  364 		Uart_Write(0xFD,0,rftx.myMAC,16);
//  365             break;
//  366             
//  367           case SEND_DEVTYPE:
//  368                 if(DEVICE_LOGICAL_TYPE==00){
//  369                   Uart_Write(0xFE,0,"COR",3);
//  370                 }
//  371                 if(DEVICE_LOGICAL_TYPE==01){
//  372                   Uart_Write(0xFE,0,"ROU",3);
//  373                 }
//  374                 if(DEVICE_LOGICAL_TYPE==02){
//  375                   Uart_Write(0xFE,0,"END",3);
//  376                 }
//  377             break;
//  378             
//  379           case SEND_NWKSTD:
//  380                 if(SampleApp_NwkState==DEV_NWK_DISC){
//  381                   Uart_Write(0xFF,0,"discovery",9);
//  382                 }
//  383                 else if(SampleApp_NwkState==DEV_NWK_JOINING){
//  384                   Uart_Write(0xFF,0,"join",4);
//  385                 }
//  386                 else if(SampleApp_NwkState==DEV_NWK_REJOIN){
//  387                   Uart_Write(0xFF,0,"rejoin",6);
//  388                 }
//  389                 else if(SampleApp_NwkState==DEV_NWK_ORPHAN){
//  390                   Uart_Write(0xFF,0,"orphan",6);
//  391                 }
//  392                 else if(SampleApp_NwkState==DEV_END_DEVICE){
//  393                   Uart_Write(0xFF,0,"device online as end",20);
//  394                 }
//  395                 else if(SampleApp_NwkState==DEV_ROUTER){
//  396                   Uart_Write(0xFF,0,"device online as rou",20);
//  397                 }
//  398                 else if(SampleApp_NwkState==DEV_COORD_STARTING){
//  399                   Uart_Write(0xFF,0,"bulid net",9);
//  400                 }
//  401                 else if(SampleApp_NwkState==DEV_ZB_COORD){
//  402                   Uart_Write(0xFF,0,"net ready",9);
//  403                 }
//  404             break;
//  405             
//  406 /**********************************************************************************
//  407  *****************************发送数据命令*****************************************
//  408             
//  409             SEND_DATA                   0xF1  //外发数据(协调器为广播，节点为点播至协调器)
//  410             SEND_DATA_P2P               0xF2  //点播数据(协调器专有)
//  411             {0xac len [0xF2 SHORTADDR(2) DATA] ~len 0xef}
//  412          
//  413  *****************  UART back data: 0xac len cmd * ~len 0xef   ********************
//  414  **********************************************************************************
//  415 */         
//  416           case SEND_DATA:
//  417               my_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//设置发送模式为广播
//  418               my_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//初始化端口号
//  419               my_DstAddr.addr.shortAddr=0xFFFF;
//  420               AF_DataRequest(&my_DstAddr,
//  421                             &SampleApp_epDesc,
//  422                             SAMPLEAPP_CLUSTERID,
//  423                             uart_rdlen-1,
//  424                             &uart_rdata[1],
//  425                             &SampleApp_TransID,
//  426                             AF_DISCV_ROUTE,
//  427                             AF_DEFAULT_RADIUS);          
//  428               Uart_Write(0xF1,0,&uart_rdata[1],uart_rdlen-1);
//  429             break; 
//  430             
//  431          case SEND_DATA_P2P:
//  432               my_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;//设置发送模式为点播
//  433               my_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//初始化端口号
//  434               uint16 myaddr_short;
//  435               myaddr_short=(uart_rdata[1]<<8) + uart_rdata[2];
//  436               my_DstAddr.addr.shortAddr=myaddr_short;
//  437               
//  438               AF_DataRequest(&my_DstAddr,
//  439                    &SampleApp_epDesc,
//  440                    SAMPLEAPP_CLUSTERID,
//  441                    uart_rdlen-3,
//  442                    &uart_rdata[3],
//  443                    &SampleApp_TransID,
//  444                    AF_DISCV_ROUTE,
//  445                    AF_DEFAULT_RADIUS);          
//  446               //Uart_Write(0xF2,0,&uart_rdata[1],uart_rdlen-1);//调试用
//  447             break; 
//  448          
//  449 /**********************************************************************************
//  450  *****************************更改配置命令*****************************************
//  451             
//  452             CHANGE_PANID                0xE1  //更改PANID
//  453             CHANGE_CHANNEL              0xE2  //更改信道
//  454             
//  455  *****************  UART back data: 0xac len cmd * ~len 0xef   ********************
//  456  **********************************************************************************
//  457 */         
//  458           case CHANGE_PANID:
//  459                mypanid=(uart_rdata[1]<<8) + uart_rdata[2];
//  460                Change_panid[0]=0xE1;
//  461                Change_panid[1]=uart_rdata[1];
//  462                Change_panid[2]=uart_rdata[2];
//  463                Change_panid[3]=0xFF;
//  464                 my_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//设置发送模式为广播
//  465                 my_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//初始化端口号
//  466                 my_DstAddr.addr.shortAddr=0xFFFF;
//  467                AF_DataRequest(&my_DstAddr,
//  468                    &SampleApp_epDesc,
//  469                    SAMPLEAPP_CLUSTERID,
//  470                    4,
//  471                    &Change_panid[0],
//  472                    &SampleApp_TransID,
//  473                    AF_DISCV_ROUTE,
//  474                    AF_DEFAULT_RADIUS);
//  475                 osal_start_timerEx( SampleApp_TaskID,
//  476                       CHANGE_PANID_EVT,
//  477                       3000 );
//  478             break; 
//  479             
//  480          case CHANGE_CHANNEL:
//  481 
//  482               mychannel=uart_rdata[1];
//  483               
//  484               if(mychannel<0x0B||mychannel>0x1A){
//  485               HalUARTWrite(0,"wrong channel",13);
//  486               }
//  487               else{
//  488               brodata[0]=0xFE;
//  489               brodata[1]=uart_rdata[1];
//  490               brodata[2]=0;
//  491               brodata[3]=0xFF;
//  492               my_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//设置发送模式为广播
//  493               my_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//初始化端口号
//  494               my_DstAddr.addr.shortAddr=0xFFFF;
//  495               //zb_WriteConfiguration(ZCD_NV_PANID, sizeof(uint16),  &mychannel);
//  496               //HalUARTWrite(0,&uart_rdata[1],1);
//  497               AF_DataRequest(&my_DstAddr,
//  498                               &SampleApp_epDesc,
//  499                               SAMPLEAPP_CLUSTERID,
//  500                               4,
//  501                               &brodata[0],
//  502                               &SampleApp_TransID,
//  503                               AF_DISCV_ROUTE,
//  504                               AF_DEFAULT_RADIUS);
//  505               
//  506               _NIB.nwkLogicalChannel = mychannel;
//  507               NLME_UpdateNV(0x01);
//  508               osal_nv_write(ZCD_NV_CHANLIST, 0, osal_nv_item_len( ZCD_NV_CHANLIST ), &zgConfigPANID);
//  509               osal_start_timerEx( SampleApp_TaskID,
//  510                     SAMPLEAPP_RESET_EVT,
//  511                     1000 );
//  512               
//  513               /*zb_WriteConfiguration(ZCD_NV_PANID, sizeof(uint16),  &pan_id) ;
//  514               zb_SystemReset();
//  515             
//  516               ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
//  517               uint32 ChannelMask,
//  518               uint8 ScanDuration,
//  519               uint8 ScanCount,
//  520               uint8 NwkUpdateId,
//  521               uint16 NwkManagerAddr )
//  522             
//  523               MgmtNwkUpdateReqFormat_t req;
//  524               req.DstAddr=0xFFFF;
//  525               req.DstAddrMode=AddrBroadcast;
//  526               req.ChannelMask[0]=BREAK_UINT32(newChanList,0);
//  527               req.ChannelMask[1]=BREAK_UINT32(newChanList,1);
//  528               req.ChannelMask[2]=BREAK_UINT32(newChanList,2);
//  529               req.ChannelMask[3]=BREAK_UINT32(newChanList,3);
//  530               req.ScanDuration=0xFE;      //Request is to change Channel
//  531               req.ScanCount=0;                //don't care
//  532               req.NwkManagerAddr=0;       //don't care
//  533               zdoMgmtNwkUpdateReq(&req);*/
//  534             
//  535               
//  536               }
//  537             break;  
//  538             
//  539 /**********************************************************************************
//  540  *****************************设备相关命令*****************************************
//  541             
//  542             CNTDEVNUM                   0xD1  //统计入网设备数量(*****)
//  543             SEND_BACK                   0xD2  //打开(协调器接收数据回传到发送端）
//  544             SEND_BACK_CANCEL            0xD3  //关闭(协调器接收数据回传到发送端）
//  545             
//  546  *****************  UART back data: 0xac len cmd * ~len 0xef   ********************
//  547  **********************************************************************************
//  548 */    
//  549         case CNTDEVNUM:
//  550              Change_panid[0]=0xD1;
//  551              Change_panid[1]=0xD2;
//  552              Change_panid[2]=0xD3;
//  553              Change_panid[3]=0xFF;
//  554              AF_DataRequest(&my_DstAddr,
//  555                             &SampleApp_epDesc,
//  556                             SAMPLEAPP_CLUSTERID,
//  557                             4,
//  558                             &Change_panid[0],
//  559                             &SampleApp_TransID,
//  560                             AF_DISCV_ROUTE,
//  561                             AF_DEFAULT_RADIUS);
//  562               //HalUARTWrite(0,Change_panid,4);
//  563               //osal_set_event(SampleApp_TaskID,CNT_NUM_EVT);
//  564           break;
//  565             
//  566         case SEND_BACK:
//  567             sendback_flag=1;
//  568           break; 
//  569         
//  570         case SEND_BACK_CANCEL:
//  571             sendback_flag=0;
//  572           break;
//  573                             
//  574 /**********************************************************************************
//  575  *****************************复位命令*********************************************
//  576             
//  577             SEND_RESET                  0xDF  //复位
//  578             
//  579  *****************  UART back data: 0xac len cmd * ~len 0xef   ********************
//  580  **********************************************************************************
//  581 */          
//  582          case SEND_RESET:
//  583                 SystemReset();
//  584             break;
//  585          default:
//  586             break;
//  587             
//  588         }
//  589   }
//  590   //afIncomingMSGPacket_t *MSGpkt;
//  591   //MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
//  592   //SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  593 }
??Uart_Read_13:
        MOV     A,#0x30
        LJMP    ?Subroutine1 & 0xFFFF
??Uart_Read_23:
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#(_NIB + 22) & 0xff
        MOV     R5,#((_NIB + 22) >> 8) & 0xff
        MOV     R2,#0x0
        MOV     R1,#-0x5
        SJMP    ??Uart_Read_28
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_24:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R1,#-0x4
        SJMP    ??Uart_Read_28
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_25:
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R1,#-0x3
        SJMP    ??Uart_Read_28
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_26:
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "COR">` & 0xff
        MOV     R5,#(`?<Constant "COR">` >> 8) & 0xff
        MOV     R2,#0x0
        MOV     R1,#-0x2
        LJMP    ??Uart_Read_28 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_27:
        MOV     DPTR,#SampleApp_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??Uart_Read_29
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x9
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "discovery">` & 0xff
        MOV     R5,#(`?<Constant "discovery">` >> 8) & 0xff
??Uart_Read_30:
        MOV     R2,#0x0
        MOV     R1,#-0x1
        LJMP    ??Uart_Read_28 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_29:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??Uart_Read_31
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "join">` & 0xff
        MOV     R5,#(`?<Constant "join">` >> 8) & 0xff
        SJMP    ??Uart_Read_30
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_31:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??Uart_Read_32
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "rejoin">` & 0xff
        MOV     R5,#(`?<Constant "rejoin">` >> 8) & 0xff
        SJMP    ??Uart_Read_30
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_32:
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??Uart_Read_33
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "orphan">` & 0xff
        MOV     R5,#(`?<Constant "orphan">` >> 8) & 0xff
        SJMP    ??Uart_Read_30
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_33:
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??Uart_Read_34
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x14
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "device online as end">` & 0xff
        MOV     R5,#(`?<Constant "device online as end">` >> 8) & 0xff
        SJMP    ??Uart_Read_30
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_34:
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??Uart_Read_35
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x14
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "device online as rou">` & 0xff
        MOV     R5,#(`?<Constant "device online as rou">` >> 8) & 0xff
        SJMP    ??Uart_Read_30
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_35:
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??Uart_Read_36
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x9
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "bulid net">` & 0xff
        MOV     R5,#(`?<Constant "bulid net">` >> 8) & 0xff
        LJMP    ??Uart_Read_30 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_36:
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      $+5
        LJMP    ??Uart_Read_13 & 0xFFFF
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x9
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "net ready">` & 0xff
        MOV     R5,#(`?<Constant "net ready">` >> 8) & 0xff
        LJMP    ??Uart_Read_30 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_20:
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x14
        MOVX    @DPTR,A
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     ?V0 + 0,#(uart_rdata + 1) & 0xff
        MOV     ?V0 + 1,#((uart_rdata + 1) >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 64)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 68)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 59)
        ; Setup parameters for call to function Uart_Write
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#(uart_rdata + 1) & 0xff
        MOV     R5,#((uart_rdata + 1) >> 8) & 0xff
        MOV     R2,#0x0
        MOV     R1,#-0xf
        LJMP    ??Uart_Read_28 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_21:
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x14
        MOVX    @DPTR,A
        MOV     DPTR,#uart_rdata + 1
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     ?V0 + 0,#(uart_rdata + 3) & 0xff
        MOV     ?V0 + 1,#((uart_rdata + 3) >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 64)
        MOV     DPTR,#uart_rdlen
        MOVX    A,@DPTR
        ADD     A,#-0x3
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
??Uart_Read_37:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 68)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 59)
        LJMP    ??Uart_Read_13 & 0xFFFF
??Uart_Read_18:
        MOV     DPTR,#uart_rdata + 2
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#uart_rdata + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,A
        MOV     A,R3
        MOV     DPTR,#mypanid
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1f
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x14
        MOVX    @DPTR,A
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 64)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 68)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 59)
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x48
        MOV     R5,#0xb
        MOV     R2,#0x3
??Uart_Read_38:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_30:
        LJMP    ??Uart_Read_13 & 0xFFFF
??Uart_Read_19:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,#-0xb
        ADD     A,R6
        CLR     C
        SUBB    A,#0x10
        JC      ??Uart_Read_39
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xd
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "wrong channel">` & 0xff
        MOV     R3,#(`?<Constant "wrong channel">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        LJMP    ??Uart_Read_13 & 0xFFFF
??Uart_Read_39:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
        MOV     DPTR,#uart_rdata + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x14
        MOVX    @DPTR,A
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 64)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 68)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     A,R6
        MOV     DPTR,#_NIB + 22
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#-0x7c
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 63)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7c
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 59)
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0xf
        LJMP    ??Uart_Read_38 & 0xFFFF
??Uart_Read_14:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2f
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2e
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2d
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 64)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     ?V0 + 0,#0x1
        LJMP    ??Uart_Read_37 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 59)
??Uart_Read_15:
        MOV     DPTR,#sendback_flag
        MOV     A,#0x1
??Uart_Read_40:
        MOVX    @DPTR,A
        LJMP    ??Uart_Read_13 & 0xFFFF
??Uart_Read_16:
        MOV     DPTR,#sendback_flag
        CLR     A
        SJMP    ??Uart_Read_40
??Uart_Read_17:
        CLR     0xa8.7
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??Uart_Read_41:
        SJMP    ??Uart_Read_41
        CFI EndBlock cfiBlock12
        REQUIRE _A_IEN0
        REQUIRE WDCTL

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_len?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 64)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     DPTR,#uart_rdlen
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function Uart_Write
        ; Setup parameters for call to function Uart_Write
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_UpdateNV
        ; Setup parameters for call to function NLME_UpdateNV
        MOV     R1,#0x1
        LCALL   ??NLME_UpdateNV?relay
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#zgConfigPANID & 0xff
        MOV     ?V0 + 1,#(zgConfigPANID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24
//  594 /*********************************************************************
//  595  * @fn      Uart_Write
//  596  *
//  597  * @brief   
//  598  *
//  599  * @param   none
//  600  *
//  601  * @return  none
//  602  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  603 void Uart_Write(uint8 cmd,uint8 port,uint8 *buf, uint16 len)
Uart_Write:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function Uart_Write
        CODE
//  604 {   
        FUNCALL Uart_Write, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 265, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 265, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 256
        MOV     DPL,#0x0
        MOV     DPH,#-0x1
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 265)
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
        MOV     DPL,#0x9
        MOV     DPH,#0x1
        LCALL   ?XSTACK_DISP0_16
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//  605     uint8 uartbuf[256];
//  606     uartbuf[0]=0xac; 
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x54
        MOVX    @DPTR,A
//  607     uartbuf[1]=len+1;
        MOV     A,R0
        INC     A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  608     uartbuf[2]=cmd;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R7
        MOVX    @DPTR,A
//  609     int i;
//  610     for(i=0;i<len;i++){
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??Uart_Write_0
//  611       uartbuf[i+3]=buf[i];
??Uart_Write_1:
        MOV     A,R4
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R2
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R3
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  612     }
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
??Uart_Write_0:
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        JC      ??Uart_Write_1
//  613     uartbuf[len+3]=~uartbuf[1];
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     R2,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     R3,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  614     uartbuf[len+4]=0xef;   
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x11
        MOVX    @DPTR,A
//  615     HalUARTWrite(port,&uartbuf[0],len+5);
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R0
        ADD     A,#0x5
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalUARTWrite?relay
//  616 }
        MOV     DPL,#0x0
        MOV     DPH,#0x1
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock25
//  617 
//  618 /*********************************************************************
//  619  * @fn      To_string
//  620  *
//  621  * @brief   
//  622  *
//  623  * @param   none
//  624  *
//  625  * @return  none
//  626  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  627 void To_string(uint8 * dest, char * src, uint8 length)
To_string:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function To_string
        CODE
//  628 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  629     uint8 *xad;
//  630     uint8 i=0;
//  631     uint8 ch;
//  632     xad=src+length-1;
        MOV     ?V0 + 0,R6
        MOV     A,R4
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
//  633     for(i=0;i<length;i++,xad--){
        MOV     R7,#0x0
        SJMP    ??To_string_0
//  634         ch=(*xad>>4)&0x0F;
//  635         dest[i<<1]=ch+((ch<10)?'0':'7');
//  636         ch=*xad&0x0F;
//  637         dest[(i<<1)+1]=ch+((ch<10)?'0':'7');                    
??To_string_1:
        MOV     R4,#0x37
??To_string_2:
        MOV     A,R4
        ADD     A,?V0 + 0
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R4,A
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R7
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
??To_string_0:
        MOV     A,R7
        CLR     C
        SUBB    A,R6
        JNC     ??To_string_3
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     ?V0 + 0,A
        CLR     C
        SUBB    A,#0xa
        JNC     ??To_string_4
        MOV     R4,#0x30
        SJMP    ??To_string_5
??To_string_4:
        MOV     R4,#0x37
??To_string_5:
        MOV     A,R4
        ADD     A,?V0 + 0
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     ?V0 + 0,A
        CLR     C
        SUBB    A,#0xa
        JNC     ??To_string_1
        MOV     R4,#0x30
        SJMP    ??To_string_2
        CFI EndBlock cfiBlock26
//  638     }
//  639 }
??To_string_3:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock27
//  640 
//  641 /*********************************************************************
//  642  * @fn      node_confirm
//  643  *
//  644  * @brief   
//  645  *
//  646  * @param   none
//  647  *
//  648  * @return  none
//  649  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  650 void node_confirm(void){
node_confirm:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function node_confirm
        CODE
        FUNCALL node_confirm, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL node_confirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  651     uint8 *buf="CFM";
//  652     afAddrType_t my_DstAddr;
//  653     my_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//设置发送模式为广播
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  654     my_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//初始化端口号
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x14
        MOVX    @DPTR,A
//  655     my_DstAddr.addr.shortAddr=0xFFFF;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine4 & 0xFFFF
//  656     AF_DataRequest(&my_DstAddr,
//  657                    &SampleApp_epDesc,
//  658                    SAMPLEAPP_CLUSTERID,
//  659                    3,
//  660                    buf,
//  661                    &SampleApp_TransID,
//  662                    AF_DISCV_ROUTE,
//  663                    AF_DEFAULT_RADIUS);
??CrossCallReturnLabel_5:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,#`?<Constant "CFM">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "CFM">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  664     time_cnt=0;
        MOV     DPTR,#time_cnt
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  665     osal_start_timerEx(SampleApp_TaskID,CO_RESET_EVENT,CO_WAIT_TIME);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x10
        MOV     R5,#0x27
        MOV     R2,#0x2
        MOV     R3,A
        LCALL   ??Subroutine15_0 & 0xFFFF
//  666 }
??CrossCallReturnLabel_31:
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 68)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 68)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 68)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 68)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_25:
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_2
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_3
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_4
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_5
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46
//  667 
//  668 /*********************************************************************
//  669  * @fn      SampleApp_MessageMSGCB
//  670  *
//  671  * @brief   Data message processor callback.  This function processes
//  672  *          any incoming data - probably from other devices.  So, based
//  673  *          on cluster ID, perform the intended action.
//  674  *
//  675  * @param   none
//  676  *
//  677  * @return  none
//  678  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  679 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock47 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  680 { 
        FUNCALL SampleApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 54
        MOV     A,#-0x36
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 65)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  681     uint8 buffer[50];
//  682     switch ( pkt->clusterId ){
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_MessageMSGCB_0:
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
//  683             case SAMPLEAPP_CLUSTERID: 
//  684             osal_memcpy(buffer,pkt->cmd.Data,pkt->cmd.DataLength);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 68)
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 65)
//  685             
//  686             if((buffer[0]=='Y')||(buffer[1]=='E')||(buffer[2]=='S')){
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x59
        JZ      ??SampleApp_MessageMSGCB_2
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x45
        JZ      ??SampleApp_MessageMSGCB_2
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x53
        JNZ     ??SampleApp_MessageMSGCB_3
//  687                     child_num++;
??SampleApp_MessageMSGCB_2:
        MOV     DPTR,#child_num
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  688             }
//  689 
//  690             if(buffer[0]==0xD1){
??SampleApp_MessageMSGCB_3:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xd1
        JNZ     ??SampleApp_MessageMSGCB_4
//  691                     uint8 tmpbbuf[4];
//  692                     for(int i=0;i<4;i++){
        MOV     R0,#0x0
        MOV     R1,#0x0
//  693                             tmpbbuf[i]=buffer[i+1];
??SampleApp_MessageMSGCB_5:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  694                     }
??CrossCallReturnLabel_19:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_26:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        JC      ??SampleApp_MessageMSGCB_5
//  695                     if(strcmp(tmpshortaddr,tmpbbuf)!=0){
        ; Setup parameters for call to function strcmp
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#tmpshortaddr & 0xff
        MOV     R3,#(tmpshortaddr >> 8) & 0xff
        LCALL   ??strcmp?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_MessageMSGCB_6
//  696                             cntnum++;
        MOV     DPTR,#cntnum
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  697                     }
//  698                     for(int i=0;i<4;i++){
??SampleApp_MessageMSGCB_6:
        MOV     R0,#0x0
        MOV     R1,#0x0
//  699                             tmpshortaddr[i]=buffer[i+1];
??SampleApp_MessageMSGCB_7:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  700                     }
//  701             }
??CrossCallReturnLabel_20:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#tmpshortaddr & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(tmpshortaddr >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??SampleApp_MessageMSGCB_7
//  702                     HalUARTWrite(0,buffer,pkt->cmd.DataLength);
??SampleApp_MessageMSGCB_4:
        ; Setup parameters for call to function HalUARTWrite
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  703             break;   
//  704     }
//  705 }
??SampleApp_MessageMSGCB_1:
        MOV     A,#0x36
        CFI EndBlock cfiBlock47
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 59)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Valid
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_27:
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_19
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_20
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 68)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiPicker58 Using cfiCommon1
        CFI (cfiPicker58) NoFunction
        CFI (cfiPicker58) Picker
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        MOVX    @DPTR,A
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x4
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Uart_Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Uart_Read

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Uart_Write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Uart_Write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??To_string?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    To_string

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??node_confirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    node_confirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "UartInit OK\\n">`:
        DB "UartInit OK\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "cost">`:
        DB "cost"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "zbco">`:
        DB "zbco"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "COR">`:
        DB "COR"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "discovery">`:
        DB "discovery"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "join">`:
        DB "join"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "rejoin">`:
        DB "rejoin"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "orphan">`:
        DB "orphan"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "device online as end">`:
        DB "device online as end"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "device online as rou">`:
        DB "device online as rou"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "bulid net">`:
        DB "bulid net"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "net ready">`:
        DB "net ready"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "wrong channel">`:
        DB "wrong channel"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "CFM">`:
        DB "CFM"

        END
//  706 
//  707 
//  708 
//  709 /*********************************************************************
//  710 *********************************************************************/
// 
// 2 765 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//   152 bytes in segment XDATA_ROM_C
//   153 bytes in segment XDATA_Z
// 
// 2 807 bytes of CODE  memory
//   152 bytes of CONST memory
//     0 bytes of DATA  memory (+ 2 bytes shared)
//   153 bytes of XDATA memory
//
//Errors: none
//Warnings: 5
