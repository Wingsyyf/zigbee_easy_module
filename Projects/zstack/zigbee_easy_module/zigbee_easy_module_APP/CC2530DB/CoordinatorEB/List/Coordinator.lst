###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         25/May/2020  14:08:35 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2.5 #
#                          .1a\Projects\zstack\Samples\SampleApp\Source\Coord #
#                          inator.c                                           #
#    Command line       =  -f "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wCoord.cfg"             #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg"            #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x04000000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\zigbee程序\模块程序v2.0 #
#                          (0525)\ZStack-CC2530-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\Source\Coordinator.c" -D ZTOOL_P1 -D   #
#                          xMT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          #
#                          xLCD_SUPPORTED=DEBUG -D HAL_UART=TRUE -D           #
#                          HAL_LED=TRUE -D NV_INIT -D NV_RESTORE -lC          #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\Co #
#                          ordinatorEB\List\" -lA "F:\zigbee程序\模块程序v2.0 #
#                          (0525)\ZStack-CC2530-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\CoordinatorEB\List\"          #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\Co #
#                          ordinatorEB\Obj\" -e --no_code_motion --debug      #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "F:\zigbee程序\模块程序v2. #
#                          0(0525)\ZStack-CC2530-2.5.1a\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\" -I                         #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \Source\" -I "F:\zigbee程序\模块程序v2.0(0525)\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\ZMain\TI2530DB\" -I            #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\hal\include\" -I           #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\hal\target\CC2530EB\" -I   #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\include\" -I           #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\high_level\" -I        #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\" -I   #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\" -I "F:\zigbee程序\模块程序v2.0(0525)\ZStac #
#                          k-CC2530-2.5.1a\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\mt\" -I         #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\osal\include\" -I          #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\services\saddr\" -I        #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\services\sdata\" -I        #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\af\" -I              #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\nwk\" -I             #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\sapi\" -I            #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\sec\" -I             #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\sys\" -I             #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\zdo\" -I             #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\zmac\" -I                  #
#                          "F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\zmac\f8w\" -Ohz            #
#                          --require_prototypes                               #
#    List file          =  F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2.5 #
#                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB\List\Coordinator.lst                    #
#    Object file        =  F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2.5 #
#                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\Coo #
#                          rdinatorEB\Obj\Coordinator.r51                     #
#                                                                             #
#                                                                             #
###############################################################################

F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SampleApp\Source\Coordinator.c
      1          /**************************************************************************************************
      2            Filename:       Coordinator.c
      3            Revised:        $Date: 2020.02.14 $
      4          
      5            Description:    Sample Application (no Profile).
      6          
      7          *********************************************************************/
      8          
      9          /*********************************************************************
     10           * INCLUDES
     11           */
     12          #include "OSAL.h"
     13          #include "AF.h"
     14          #include "ZDApp.h"
     15          #include "ZDObject.h"
     16          #include "ZDProfile.h"
     17          #include <String.h>
     18          #include <hal_types.h>
     19          #include "sapi.h"
     20          #include "MT_SYS.h"
     21          #include "OSAL_Nv.h"
     22          #include "SampleApp.h"
     23          #include "DebugTrace.h"
     24          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     25          
     26          /* HAL */
     27          #include "hal_lcd.h"
     28          #include "hal_led.h"
     29          #include "hal_key.h"
     30          #include "hal_uart.h"
     31          
     32          #define CHILD_NUM_EVENT      0x01
     33          #define CO_RESET_EVENT       0x02
     34          #define CHANGE_PANID_EVT     0x03
     35          
     36          #define SAMPLEAPP_RESET_EVT  0x0F
     37          /*********************************************************************
     38           * GLOBAL VARIABLES
     39           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40          uint8 uart_rdata[128];         //数据暂存器，最多能够缓存40个字节
   \                     uart_rdata:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          uint8 uart_rdlenrightflag=0; //数据长度校验位正确标志
   \                     uart_rdlenrightflag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     42          uint8 uart_rdsuccessflag=0;  //成功接收到数据信息标志位
   \                     uart_rdsuccessflag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     43          uint8 uart_rd_enableflag=0;   //接受状态标记
   \                     uart_rd_enableflag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     44          uint8 uart_rdlen=0;          //有用信息的数据长度
   \                     uart_rdlen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     45          uint8 uart_rdlentemp=0;      //用来记录已读数据长度
   \                     uart_rdlentemp:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     46          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     47          uint8 child_num=0; 
   \                     child_num:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     48          uint16 time_cnt=0;
   \                     time_cnt:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     49          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     50          uint16 mypanid;
   \                     mypanid:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     51          uint8 tmpshortaddr[4];
   \                     tmpshortaddr:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     52          uint8 cntnum=0;
   \                     cntnum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     53          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     54          uint8 sendback_flag=0;
   \                     sendback_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     55          
     56          //sendBackData_t  *send_pMsg;
     57          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     58          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0000         DW 0
     59          {
     60            SAMPLEAPP_CLUSTERID
     61          };
     62          
     63          //描述zigbee节点设备（设备描述符）

   \                                 In  segment XDATA_ROM_C, align 1
     64          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   00           DB 0
   \   00000A   0000         DW 0H
     65          {
     66            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     67            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     68            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     69            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     70            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     71            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     72            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     73            0,                               //  uint8  AppNumInClusters;
     74            (cId_t *)NULL                    //  uint8 *pAppInClusterList;
     75          };
     76          
     77          //********************************************************************

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          endPointDesc_t SampleApp_epDesc;//节点描述符
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     79          uint8 SampleApp_TaskID;   //任务优先级
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          uint8 SampleApp_TransID;  // 数据发送序列号
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     82          
     83          /*********************************************************************
     84           * LOCAL FUNCTIONS
     85           */
     86          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
     87          void SampleApp_SendTheMessage( void );
     88          void Uart_Read( uint8 port, uint8 event );
     89          void Uart_Write(uint8 cmd,uint8 port,uint8 *buf, uint16 len);
     90          void ShowInfo(void);
     91          void To_string(uint8 * dest, char * src, uint8 length);
     92          void node_confirm(void);
     93          void Send_data_back( afIncomingMSGPacket_t *pkt ,uint8* tmpbuffer);
     94          /*********************************************************************
     95           * @fn      SampleApp_Init
     96           *
     97           * @brief   Initialization function for the Generic App Task.
     98           *          This is called during initialization and should contain
     99           *          any application specific initialization (ie. hardware
    100           *          initialization/setup, table initialization, power up
    101           *          notificaiton ... ).
    102           *
    103           * @param   task_id - the ID assigned by OSAL.  This ID should be
    104           *                    used to send messages and set timers.
    105           *
    106           * @return  none
    107           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    108          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    109          { 
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    110            halUARTCfg_t uartConfig;
    111            SampleApp_TaskID                   = task_id;
   \   00000B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000E   F0           MOVX    @DPTR,A
    112            SampleApp_TransID                  = 0;
   \   00000F   90....       MOV     DPTR,#SampleApp_TransID
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
    113            // Fill out the endpoint description.
    114            SampleApp_epDesc.endPoint          = SAMPLEAPP_ENDPOINT;
   \   000014   90....       MOV     DPTR,#SampleApp_epDesc
   \   000017   7414         MOV     A,#0x14
   \   000019   F0           MOVX    @DPTR,A
    115            SampleApp_epDesc.task_id           = &SampleApp_TaskID;
   \   00001A   A3           INC     DPTR
   \   00001B   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000021   F0           MOVX    @DPTR,A
    116            SampleApp_epDesc.simpleDesc        = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000022   A3           INC     DPTR
   \   000023   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000029   F0           MOVX    @DPTR,A
    117            SampleApp_epDesc.latencyReq        = noLatencyReqs;
   \   00002A   A3           INC     DPTR
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
    118            // Register the endpoint description with the AF
    119            afRegister( &SampleApp_epDesc );
   \   00002D                ; Setup parameters for call to function afRegister
   \   00002D   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00002F   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000031   12....       LCALL   ??afRegister?relay
    120            //------------------------配置串口---------------------------------
    121            uartConfig.configured=TRUE;
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   7401         MOV     A,#0x1
   \   00003C   F0           MOVX    @DPTR,A
    122            uartConfig.baudRate=HAL_UART_BR_115200;
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   7404         MOV     A,#0x4
   \   000042   F0           MOVX    @DPTR,A
    123            uartConfig.flowControl=FALSE;
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
    124            uartConfig.callBackFunc=Uart_Read;
   \   00004A   741B         MOV     A,#0x1b
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   74..         MOV     A,#??Uart_Read?relay & 0xff
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   74..         MOV     A,#(??Uart_Read?relay >> 8) & 0xff
   \   000055   F0           MOVX    @DPTR,A
    125            HalUARTOpen(0,&uartConfig);
   \   000056                ; Setup parameters for call to function HalUARTOpen
   \   000056   85..82       MOV     DPL,?XSP + 0
   \   000059   85..83       MOV     DPH,?XSP + 1
   \   00005C   AA82         MOV     R2,DPL
   \   00005E   AB83         MOV     R3,DPH
   \   000060   7900         MOV     R1,#0x0
   \   000062   12....       LCALL   ??HalUARTOpen?relay
    126            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n"));//串口发送
   \   000065                ; Setup parameters for call to function HalUARTWrite
   \   000065   7C0D         MOV     R4,#0xd
   \   000067   7D00         MOV     R5,#0x0
   \   000069   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   00006B   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   00006D   7900         MOV     R1,#0x0
   \   00006F   12....       LCALL   ??HalUARTWrite?relay
    127            //Uart_Write("uartinit",sizeof("uartinit")-1);
    128            //-----------------------------------------------------------------
    129          }
   \   000072   741D         MOV     A,#0x1d
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077                REQUIRE ?Subroutine0
   \   000077                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    130          
    131          /*********************************************************************
    132           * @fn      SampleApp_ProcessEvent
    133           *
    134           * @brief   Generic Application Task event processor.  This function
    135           *          is called to process all events for the task.  Events
    136           *          include timers, messages and any other user defined events.
    137           *
    138           * @param   task_id  - The OSAL assigned task ID.
    139           * @param   events - events to process.  This is a bit map and can
    140           *                   contain more than one event.
    141           *
    142           * @return  none
    143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    144          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    145          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    146            afIncomingMSGPacket_t *MSGpkt;
    147            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6076         JZ      ??SampleApp_ProcessEvent_0
    148            {
    149              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   803F         SJMP    ??SampleApp_ProcessEvent_1
    150              
    151              while ( MSGpkt )
    152              {
    153                switch ( MSGpkt->hdr.event )
    154                {
    155                 case AF_INCOMING_MSG_CMD:
    156                    SampleApp_MessageMSGCB( MSGpkt );
    157                    break;
    158                    
    159                 case ZDO_STATE_CHANGE:
    160                     SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    161                     if(SampleApp_NwkState==DEV_COORD_STARTING)
   \   000015   6408         XRL     A,#0x8
   \   000017   700D         JNZ     ??SampleApp_ProcessEvent_3
    162                    {
    163                      HalUARTWrite(0,"cost",4);
   \   000019                ; Setup parameters for call to function HalUARTWrite
   \   000019   7C04         MOV     R4,#0x4
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   7A..         MOV     R2,#`?<Constant "cost">` & 0xff
   \   00001F   7B..         MOV     R3,#(`?<Constant "cost">` >> 8) & 0xff
   \   000021   7900         MOV     R1,#0x0
   \   000023   12....       LCALL   ??HalUARTWrite?relay
    164                    }
    165                    if(SampleApp_NwkState==DEV_ZB_COORD)
   \                     ??SampleApp_ProcessEvent_3:
   \   000026   90....       MOV     DPTR,#SampleApp_NwkState
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6409         XRL     A,#0x9
   \   00002C   7019         JNZ     ??SampleApp_ProcessEvent_4
    166                    {
    167                      HalUARTWrite(0,"zbco",4);
   \   00002E                ; Setup parameters for call to function HalUARTWrite
   \   00002E   7C04         MOV     R4,#0x4
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A..         MOV     R2,#`?<Constant "zbco">` & 0xff
   \   000034   7B..         MOV     R3,#(`?<Constant "zbco">` >> 8) & 0xff
   \   000036   7900         MOV     R1,#0x0
   \   000038   12....       LCALL   ??HalUARTWrite?relay
    168                      osal_set_event(SampleApp_TaskID,CHILD_NUM_EVENT);
   \   00003B                ; Setup parameters for call to function osal_set_event
   \   00003B   7A01         MOV     R2,#0x1
   \   00003D   7B00         MOV     R3,#0x0
   \   00003F   90....       MOV     DPTR,#SampleApp_TaskID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   ??osal_set_event?relay
    169                    }
    170                    break;
    171          		  
    172                  default:
    173                    break;
    174                }
    175                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000047                ; Setup parameters for call to function osal_msg_deallocate
   \   000047   AA..         MOV     R2,?V0 + 0
   \   000049   AB..         MOV     R3,?V0 + 1
   \   00004B   12....       LCALL   ??osal_msg_deallocate?relay
    176                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00004E                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00004E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   ??osal_msg_receive?relay
   \   000056   8A..         MOV     ?V0 + 0,R2
   \   000058   8B..         MOV     ?V0 + 1,R3
   \   00005A   E5..         MOV     A,?V0 + 0
   \   00005C   45..         ORL     A,?V0 + 1
   \   00005E   601A         JZ      ??SampleApp_ProcessEvent_5
   \   000060   85..82       MOV     DPL,?V0 + 0
   \   000063   85..83       MOV     DPH,?V0 + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   24E6         ADD     A,#-0x1a
   \   000069   6006         JZ      ??SampleApp_ProcessEvent_6
   \   00006B   2449         ADD     A,#0x49
   \   00006D   60A0         JZ      ??SampleApp_ProcessEvent_2
   \   00006F   80D6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000071                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000071   AA..         MOV     R2,?V0 + 0
   \   000073   AB..         MOV     R3,?V0 + 1
   \   000075   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000078   80CD         SJMP    ??SampleApp_ProcessEvent_4
    177              }
    178              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007A   EE           MOV     A,R6
   \   00007B   FA           MOV     R2,A
   \   00007C   EF           MOV     A,R7
   \   00007D   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   00007F   FB           MOV     R3,A
   \   000080   02....       LJMP    ??SampleApp_ProcessEvent_8 & 0xFFFF
    179            }
    180            if(events & CHILD_NUM_EVENT)
   \                     ??SampleApp_ProcessEvent_0:
   \   000083   EE           MOV     A,R6
   \   000084   A2E0         MOV     C,0xE0 /* A   */.0
   \   000086   502D         JNC     ??SampleApp_ProcessEvent_9
    181            {
    182              
    183              if(time_cnt==CO_RESET_TIME){
   \   000088   90....       MOV     DPTR,#time_cnt
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   6410         XRL     A,#0x10
   \   00008E   7004         JNZ     ??SampleApp_ProcessEvent_10
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   640E         XRL     A,#0xe
   \                     ??SampleApp_ProcessEvent_10:
   \   000094   7003         JNZ     ??SampleApp_ProcessEvent_11
    184                node_confirm();
   \   000096                ; Setup parameters for call to function node_confirm
   \   000096   12....       LCALL   ??node_confirm?relay
    185              }
    186              time_cnt++;
   \                     ??SampleApp_ProcessEvent_11:
   \   000099   90....       MOV     DPTR,#time_cnt
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   2401         ADD     A,#0x1
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   3400         ADDC    A,#0x0
   \   0000A4   F0           MOVX    @DPTR,A
    187              osal_start_timerEx(SampleApp_TaskID,CHILD_NUM_EVENT,1000);//定时函数
   \   0000A5                ; Setup parameters for call to function osal_start_timerEx
   \   0000A5   7CE8         MOV     R4,#-0x18
   \   0000A7   7D03         MOV     R5,#0x3
   \   0000A9   7A01         MOV     R2,#0x1
   \   0000AB   12....       LCALL   ?Subroutine8 & 0xFFFF
    188              return (events ^ CHILD_NUM_EVENT);
   \                     ??CrossCallReturnLabel_28:
   \   0000AE   EE           MOV     A,R6
   \   0000AF   6401         XRL     A,#0x1
   \                     ??SampleApp_ProcessEvent_12:
   \   0000B1   FA           MOV     R2,A
   \   0000B2   EF           MOV     A,R7
   \   0000B3   80CA         SJMP    ??SampleApp_ProcessEvent_7
    189            }
    190            if(events & CO_RESET_EVENT)
   \                     ??SampleApp_ProcessEvent_9:
   \   0000B5   5402         ANL     A,#0x2
   \   0000B7   601A         JZ      ??SampleApp_ProcessEvent_13
    191            {
    192              
    193              if(child_num==0){
   \   0000B9   90....       MOV     DPTR,#child_num
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   700C         JNZ     ??SampleApp_ProcessEvent_14
    194                SystemReset();
   \   0000BF   C2AF         CLR     0xa8.7
   \   0000C1   C2AF         CLR     0xa8.7
   \   0000C3   75C9AB       MOV     0xc9,#-0x55
   \   0000C6   75C95B       MOV     0xc9,#0x5b
   \                     ??SampleApp_ProcessEvent_15:
   \   0000C9   80FE         SJMP    ??SampleApp_ProcessEvent_15
    195              }
    196              child_num=0;
   \                     ??SampleApp_ProcessEvent_14:
   \   0000CB   E4           CLR     A
   \   0000CC   F0           MOVX    @DPTR,A
    197              return (events ^ CO_RESET_EVENT);
   \   0000CD   EE           MOV     A,R6
   \   0000CE   6402         XRL     A,#0x2
   \   0000D0   FA           MOV     R2,A
   \   0000D1   8055         SJMP    ??SampleApp_ProcessEvent_8
    198            }
    199            if(events & SAMPLEAPP_RESET_EVT)
   \                     ??SampleApp_ProcessEvent_13:
   \   0000D3   EE           MOV     A,R6
   \   0000D4   540F         ANL     A,#0xf
   \   0000D6   600C         JZ      ??SampleApp_ProcessEvent_16
    200            {
    201              SystemReset();
   \   0000D8   C2AF         CLR     0xa8.7
   \   0000DA   C2AF         CLR     0xa8.7
   \   0000DC   75C9AB       MOV     0xc9,#-0x55
   \   0000DF   75C95B       MOV     0xc9,#0x5b
   \                     ??SampleApp_ProcessEvent_17:
   \   0000E2   80FE         SJMP    ??SampleApp_ProcessEvent_17
    202            }
    203            
    204            if(events & CHANGE_PANID_EVT)
   \                     ??SampleApp_ProcessEvent_16:
   \   0000E4   EE           MOV     A,R6
   \   0000E5   5403         ANL     A,#0x3
   \   0000E7   603B         JZ      ??SampleApp_ProcessEvent_18
    205            {
    206                  _NIB.nwkPanId = mypanid;
   \   0000E9   90....       MOV     DPTR,#mypanid
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F8           MOV     R0,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F9           MOV     R1,A
   \   0000F1   90....       MOV     DPTR,#_NIB + 33
   \   0000F4   E8           MOV     A,R0
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E9           MOV     A,R1
   \   0000F8   12....       LCALL   ?Subroutine5 & 0xFFFF
    207                  NLME_UpdateNV(0x01);
    208                  osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &zgConfigPANID);
   \                     ??CrossCallReturnLabel_6:
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FE                ; Setup parameters for call to function osal_nv_item_len
   \   0000FE   7A83         MOV     R2,#-0x7d
   \   000100   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   7C00         MOV     R4,#0x0
   \   000108   7D00         MOV     R5,#0x0
   \   00010A   7A83         MOV     R2,#-0x7d
   \   00010C   7B00         MOV     R3,#0x0
   \   00010E   12....       LCALL   ??osal_nv_write?relay
   \   000111   7404         MOV     A,#0x4
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
    209                  osal_start_timerEx( SampleApp_TaskID,
    210                                SAMPLEAPP_RESET_EVT,
    211                                2000 );
   \   000116                ; Setup parameters for call to function osal_start_timerEx
   \   000116   7CD0         MOV     R4,#-0x30
   \   000118   7D07         MOV     R5,#0x7
   \   00011A   7A0F         MOV     R2,#0xf
   \   00011C   12....       LCALL   ?Subroutine8 & 0xFFFF
    212                  return (events ^ CHANGE_PANID_EVT);
   \                     ??CrossCallReturnLabel_29:
   \   00011F   EE           MOV     A,R6
   \   000120   6403         XRL     A,#0x3
   \   000122   808D         SJMP    ??SampleApp_ProcessEvent_12
    213            }       
    214            return 0;
   \                     ??SampleApp_ProcessEvent_18:
   \   000124   7A00         MOV     R2,#0x0
   \   000126   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   000128   7F04         MOV     R7,#0x4
   \   00012A   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00012D                REQUIRE _A_IEN0
   \   00012D                REQUIRE WDCTL
    215          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine15_0
   \   000002                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   90....       MOV     DPTR,#SampleApp_TaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_start_timerEx?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_nv_item_len?relay
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function NLME_UpdateNV
   \   000001                ; Setup parameters for call to function NLME_UpdateNV
   \   000001   7901         MOV     R1,#0x1
   \   000003   12....       LCALL   ??NLME_UpdateNV?relay
   \   000006                ; Setup parameters for call to function osal_nv_write
   \   000006                ; Setup parameters for call to function osal_nv_write
   \   000006   75....       MOV     ?V0 + 0,#zgConfigPANID & 0xff
   \   000009   75....       MOV     ?V0 + 1,#(zgConfigPANID >> 8) & 0xff
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   22           RET
    216          
    217          /*********************************************************************
    218           * LOCAL FUNCTIONS
    219           */
    220          /*********************************************************************
    221           * @fn      Uart_Read
    222           *
    223           * @brief   
    224           *
    225           * @param   none
    226           *
    227           * @return  none
    228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          void Uart_Read(uint8 port, uint8 event)
   \                     Uart_Read:
    230          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 48
   \   000005   74D0         MOV     A,#-0x30
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    231          //**********串口协议解析用的变量************************************	
    232            uint8  ch,check_temp;
    233            uart_rdlenrightflag=0;          
   \                     ??Uart_Read_0:
   \   00000A   90....       MOV     DPTR,#uart_rdlenrightflag
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    234            uart_rdsuccessflag=0;           
   \   00000F   90....       MOV     DPTR,#uart_rdsuccessflag
   \                     ??Uart_Read_1:
   \   000012   F0           MOVX    @DPTR,A
    235            uart_rd_enableflag=0;           
   \   000013   90....       MOV     DPTR,#uart_rd_enableflag
   \   000016   F0           MOVX    @DPTR,A
    236            uart_rdlen=0;               
   \   000017   90....       MOV     DPTR,#uart_rdlen
   \   00001A   F0           MOVX    @DPTR,A
    237            uart_rdlentemp=0;
   \   00001B   90....       MOV     DPTR,#uart_rdlentemp
   \   00001E   8008         SJMP    ??Uart_Read_2
    238          		
    239          //**********发送数据用到的变量**************************************	
    240            afAddrType_t my_DstAddr;//发送函数结构体初始化
    241          		
    242          //*****************临时变量*****************************************		
    243            RFTX rftx;//读取设备状态结构体		
    244            uint8 PAN_ID[2];//PANID temp
    245            uint8 SHORT[2];//SHORTADDR temp
    246            uint16 SHORTADDR_temp;//SHORTADDR temp
    247            uint8 Change_panid[4];//CHANGEPANID temp
    248            uint8 brodata[4];
    249            uint8 mychannel;
    250          
    251            while (Hal_UART_RxBufLen(0))
    252            {
    253                  HalUARTRead(0,&ch,1);
    254                  if(ch==0xac)
    255                  {
    256          			uart_rd_enableflag=1;
   \                     ??Uart_Read_3:
   \   000020   7401         MOV     A,#0x1
   \                     ??Uart_Read_4:
   \   000022   F0           MOVX    @DPTR,A
    257          			uart_rdlentemp++;
   \   000023   90....       MOV     DPTR,#uart_rdlentemp
   \   000026   E0           MOVX    A,@DPTR
   \   000027   04           INC     A
   \                     ??Uart_Read_2:
   \   000028   F0           MOVX    @DPTR,A
    258                  }
   \   000029                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000029   7900         MOV     R1,#0x0
   \   00002B   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   00002E   8B..         MOV     ?V0 + 1,R3
   \   000030   EA           MOV     A,R2
   \   000031   45..         ORL     A,?V0 + 1
   \   000033   7003         JNZ     $+5
   \   000035   02....       LJMP    ??Uart_Read_5 & 0xFFFF
   \   000038                ; Setup parameters for call to function HalUARTRead
   \   000038   7C01         MOV     R4,#0x1
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   AA82         MOV     R2,DPL
   \   000044   AB83         MOV     R3,DPH
   \   000046   7900         MOV     R1,#0x0
   \   000048   12....       LCALL   ??HalUARTRead?relay
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   E0           MOVX    A,@DPTR
   \   000052   64AC         XRL     A,#0xac
   \   000054   90....       MOV     DPTR,#uart_rd_enableflag
   \   000057   60C7         JZ      ??Uart_Read_3
    259          	else if(uart_rd_enableflag==1&&uart_rdlentemp==1)
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6401         XRL     A,#0x1
   \   00005C   6003         JZ      $+5
   \   00005E   02....       LJMP    ??Uart_Read_6 & 0xFFFF
   \   000061   90....       MOV     DPTR,#uart_rdlentemp
   \   000064   E0           MOVX    A,@DPTR
   \   000065   6401         XRL     A,#0x1
   \   000067   7012         JNZ     ??Uart_Read_7
    260          	{
    261          		uart_rdlen=ch;
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   90....       MOV     DPTR,#uart_rdlen
   \   000073   F0           MOVX    @DPTR,A
    262          		uart_rdlentemp++;
   \   000074   90....       MOV     DPTR,#uart_rdlentemp
   \   000077   7402         MOV     A,#0x2
   \   000079   80AD         SJMP    ??Uart_Read_2
    263          	}
   \                     ??Uart_Read_7:
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   C3           CLR     C
   \   00007D   9402         SUBB    A,#0x2
   \   00007F   4039         JC      ??Uart_Read_8
   \   000081   90....       MOV     DPTR,#uart_rdlen
   \   000084   E0           MOVX    A,@DPTR
   \   000085   2401         ADD     A,#0x1
   \   000087   F8           MOV     R0,A
   \   000088   E4           CLR     A
   \   000089   3400         ADDC    A,#0x0
   \   00008B   F9           MOV     R1,A
   \   00008C   90....       MOV     DPTR,#uart_rdlentemp
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FA           MOV     R2,A
   \   000091   E8           MOV     A,R0
   \   000092   9A           SUBB    A,R2
   \   000093   E9           MOV     A,R1
   \   000094   9400         SUBB    A,#0x0
   \   000096   C3           CLR     C
   \   000097   65D0         XRL     A,PSW
   \   000099   33           RLC     A
   \   00009A   401E         JC      ??Uart_Read_8
    264          	else if(uart_rd_enableflag==1&&uart_rdlentemp>=2&&uart_rdlentemp<=uart_rdlen+1)
    265          	{
    266          		uart_rdata[uart_rdlentemp-2]=ch;
   \   00009C   85..82       MOV     DPL,?XSP + 0
   \   00009F   85..83       MOV     DPH,?XSP + 1
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   C0E0         PUSH    A
   \   0000A5   90....       MOV     DPTR,#uart_rdlentemp
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F8           MOV     R0,A
   \   0000AA   74..         MOV     A,#(uart_rdata + 254) & 0xff
   \   0000AC   28           ADD     A,R0
   \   0000AD   F582         MOV     DPL,A
   \   0000AF   74..         MOV     A,#((uart_rdata - 2) >> 8) & 0xff
   \   0000B1   3400         ADDC    A,#0x0
   \   0000B3   F583         MOV     DPH,A
   \   0000B5   D0E0         POP     A
   \   0000B7   02....       LJMP    ??Uart_Read_4 & 0xFFFF
    267          		uart_rdlentemp++;
    268          	}
   \                     ??Uart_Read_8:
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   FA           MOV     R2,A
   \   0000BC   90....       MOV     DPTR,#uart_rdlen
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   2402         ADD     A,#0x2
   \   0000C2   F8           MOV     R0,A
   \   0000C3   E4           CLR     A
   \   0000C4   3400         ADDC    A,#0x0
   \   0000C6   F9           MOV     R1,A
   \   0000C7   E8           MOV     A,R0
   \   0000C8   6A           XRL     A,R2
   \   0000C9   7001         JNZ     ??Uart_Read_9
   \   0000CB   E9           MOV     A,R1
   \                     ??Uart_Read_9:
   \   0000CC   7019         JNZ     ??Uart_Read_10
    269          	else if(uart_rd_enableflag==1&&uart_rdlentemp==uart_rdlen+2)
    270          	{
    271          		check_temp = ~uart_rdlen;
    272          		if(ch==check_temp){
   \   0000CE   85..82       MOV     DPL,?XSP + 0
   \   0000D1   85..83       MOV     DPH,?XSP + 1
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F8           MOV     R0,A
   \   0000D6   90....       MOV     DPTR,#uart_rdlen
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F4           CPL     A
   \   0000DB   68           XRL     A,R0
   \   0000DC   7006         JNZ     ??Uart_Read_11
    273          			uart_rdlenrightflag=1;
   \   0000DE   90....       MOV     DPTR,#uart_rdlenrightflag
   \   0000E1   02....       LJMP    ??Uart_Read_3 & 0xFFFF
    274                                  uart_rdlentemp++;
    275          		}
    276          		else{
    277          			uart_rdlenrightflag=0;          
   \                     ??Uart_Read_11:
   \   0000E4   02....       LJMP    ??Uart_Read_0 & 0xFFFF
    278          			uart_rdsuccessflag=0;           
    279          			uart_rd_enableflag=0;           
    280          			uart_rdlen=0;               
    281          			uart_rdlentemp=0;		
    282          		}
    283              }
   \                     ??Uart_Read_10:
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   2403         ADD     A,#0x3
   \   0000EA   08           INC     R0
   \   0000EB   E4           CLR     A
   \   0000EC   3400         ADDC    A,#0x0
   \   0000EE   F9           MOV     R1,A
   \   0000EF   E8           MOV     A,R0
   \   0000F0   6A           XRL     A,R2
   \   0000F1   7001         JNZ     ??Uart_Read_12
   \   0000F3   E9           MOV     A,R1
   \                     ??Uart_Read_12:
   \   0000F4   7020         JNZ     ??Uart_Read_6
    284          	else if(uart_rd_enableflag==1&&uart_rdlentemp==uart_rdlen+3){
    285          		if(( ch==0xef )&&( uart_rdlenrightflag==1 )){
   \   0000F6   85..82       MOV     DPL,?XSP + 0
   \   0000F9   85..83       MOV     DPH,?XSP + 1
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   64EF         XRL     A,#0xef
   \   0000FF   70E3         JNZ     ??Uart_Read_11
   \   000101   90....       MOV     DPTR,#uart_rdlenrightflag
   \   000104   E0           MOVX    A,@DPTR
   \   000105   6401         XRL     A,#0x1
   \   000107   70DB         JNZ     ??Uart_Read_11
    286          			uart_rdsuccessflag=1;
   \   000109   90....       MOV     DPTR,#uart_rdsuccessflag
   \   00010C   7401         MOV     A,#0x1
   \   00010E   F0           MOVX    @DPTR,A
    287          			uart_rdlentemp=0;
   \   00010F   90....       MOV     DPTR,#uart_rdlentemp
   \   000112   E4           CLR     A
   \   000113   02....       LJMP    ??Uart_Read_2 & 0xFFFF
    288          		}
    289          		else{
    290          			uart_rdlenrightflag=0;          
    291          			uart_rdsuccessflag=0;           
    292          			uart_rd_enableflag=0;           
    293          			uart_rdlen=0;               
    294          			uart_rdlentemp=0;
    295          		}
    296          	}
    297                  else{           
    298                          uart_rdsuccessflag=0;           
   \                     ??Uart_Read_6:
   \   000116   90....       MOV     DPTR,#uart_rdsuccessflag
   \   000119   E4           CLR     A
   \   00011A   02....       LJMP    ??Uart_Read_1 & 0xFFFF
    299                          uart_rd_enableflag=0;           
    300                          uart_rdlen=0;               
    301                          uart_rdlentemp=0;
    302                  }
    303            }
    304            
    305            if(uart_rdsuccessflag==1){
   \                     ??Uart_Read_5:
   \   00011D   90....       MOV     DPTR,#uart_rdsuccessflag
   \   000120   E0           MOVX    A,@DPTR
   \   000121   6401         XRL     A,#0x1
   \   000123   6003         JZ      $+5
   \   000125   02....       LJMP    ??Uart_Read_13 & 0xFFFF
    306                    uart_rdsuccessflag=0;
   \   000128   E4           CLR     A
   \   000129   F0           MOVX    @DPTR,A
    307                    
    308                    SHORTADDR_temp=NLME_GetShortAddr();
   \   00012A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00012A   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00012D   7405         MOV     A,#0x5
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   EA           MOV     A,R2
   \   000133   F0           MOVX    @DPTR,A
   \   000134   A3           INC     DPTR
   \   000135   EB           MOV     A,R3
   \   000136   F0           MOVX    @DPTR,A
    309                    To_string(rftx.myNWK,(uint8 *)&SHORTADDR_temp,2);
                                                ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000137                ; Setup parameters for call to function To_string
   \   000137   7902         MOV     R1,#0x2
   \   000139   7405         MOV     A,#0x5
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   AC82         MOV     R4,DPL
   \   000140   AD83         MOV     R5,DPH
   \   000142   741E         MOV     A,#0x1e
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   AA82         MOV     R2,DPL
   \   000149   AB83         MOV     R3,DPH
   \   00014B   12....       LCALL   ??To_string?relay
    310                    To_string(rftx.myMAC,NLME_GetExtAddr(),8);
                                                ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   00014E                ; Setup parameters for call to function To_string
   \   00014E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00014E   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000151   EA           MOV     A,R2
   \   000152   FC           MOV     R4,A
   \   000153   EB           MOV     A,R3
   \   000154   FD           MOV     R5,A
   \   000155   7408         MOV     A,#0x8
   \   000157   F9           MOV     R1,A
   \   000158   7420         MOV     A,#0x20
   \   00015A   12....       LCALL   ?XSTACK_DISP0_8
   \   00015D   AA82         MOV     R2,DPL
   \   00015F   AB83         MOV     R3,DPH
   \   000161   12....       LCALL   ??To_string?relay
    311                    
    312          /************************************************************************************
    313          **************************自定协议AC LEN CMD DATA ~LEN EF***************************
    314          #define SEND_PANID                  0xFA  //读取PANID
    315          #define SEND_CHANNEL                0xFB  //读取信道
    316          #define SEND_SHORTADDR              0xFC  //读取短地址
    317          #define SEND_MACADDR                0xFD  //读取MAC地址
    318          #define SEND_DEVTYPE                0xFE  //读取设备类型
    319          #define SEND_NWKSTD                 0xFF  //读取网络状态
    320                  
    321          #define SEND_DATA                   0xF1  //外发数据(协调器为广播，节点为点播至协调器)
    322          #define SEND_DATA_P2P               0xF2  //点播数据(协调器专有)
    323          
    324          #define CHANGE_PANID                0xE1  //更改PANID
    325          #define CHANGE_CHANNEL              0xE2  //更改信道
    326            
    327          #define CNTDEVNUM                   0xD1  //统计入网设备数量(未实现)
    328                  
    329          #define SEND_RESET                  0xDF  //复位
    330          ************************************************************************************/         
    331                  
    332               switch(uart_rdata[0]){
   \   000164   90....       MOV     DPTR,#uart_rdata
   \   000167   E0           MOVX    A,@DPTR
   \   000168   242F         ADD     A,#0x2f
   \   00016A   7003         JNZ     $+5
   \   00016C   02....       LJMP    ??Uart_Read_14 & 0xFFFF
   \   00016F   14           DEC     A
   \   000170   7003         JNZ     $+5
   \   000172   02....       LJMP    ??Uart_Read_15 & 0xFFFF
   \   000175   14           DEC     A
   \   000176   7003         JNZ     $+5
   \   000178   02....       LJMP    ??Uart_Read_16 & 0xFFFF
   \   00017B   24F4         ADD     A,#-0xc
   \   00017D   7003         JNZ     $+5
   \   00017F   02....       LJMP    ??Uart_Read_17 & 0xFFFF
   \   000182   24FE         ADD     A,#-0x2
   \   000184   7003         JNZ     $+5
   \   000186   02....       LJMP    ??Uart_Read_18 & 0xFFFF
   \   000189   14           DEC     A
   \   00018A   7003         JNZ     $+5
   \   00018C   02....       LJMP    ??Uart_Read_19 & 0xFFFF
   \   00018F   24F1         ADD     A,#-0xf
   \   000191   7003         JNZ     $+5
   \   000193   02....       LJMP    ??Uart_Read_20 & 0xFFFF
   \   000196   14           DEC     A
   \   000197   7003         JNZ     $+5
   \   000199   02....       LJMP    ??Uart_Read_21 & 0xFFFF
   \   00019C   24F8         ADD     A,#-0x8
   \   00019E   601D         JZ      ??Uart_Read_22
   \   0001A0   14           DEC     A
   \   0001A1   6073         JZ      ??Uart_Read_23
   \   0001A3   14           DEC     A
   \   0001A4   7003         JNZ     $+5
   \   0001A6   02....       LJMP    ??Uart_Read_24 & 0xFFFF
   \   0001A9   14           DEC     A
   \   0001AA   7003         JNZ     $+5
   \   0001AC   02....       LJMP    ??Uart_Read_25 & 0xFFFF
   \   0001AF   14           DEC     A
   \   0001B0   7003         JNZ     $+5
   \   0001B2   02....       LJMP    ??Uart_Read_26 & 0xFFFF
   \   0001B5   14           DEC     A
   \   0001B6   7003         JNZ     $+5
   \   0001B8   02....       LJMP    ??Uart_Read_27 & 0xFFFF
   \   0001BB   8054         SJMP    ??Uart_Read_13
    333          /**********************************************************************************
    334           *****************************读取设备信息*****************************************
    335                      
    336                     SEND_PANID                  0xFA  //读取PANID
    337                     SEND_CHANNEL                0xFB  //读取信道
    338                     SEND_SHORTADDR              0xFC  //读取短地址
    339                     SEND_MACADDR                0xFD  //读取MAC地址
    340                     SEND_DEVTYPE                0xFE  //读取设备类型
    341                     SEND_NWKSTD                 0xFF  //读取网络状态
    342                      
    343           *****************  UART back data: 0xac len cmd * ~len 0xef   ********************
    344           **********************************************************************************
    345          */    
    346                    case SEND_PANID:
    347                          osal_memcpy(&mypanid,&_NIB.nwkPanId,sizeof(uint16));
   \                     ??Uart_Read_22:
   \   0001BD                ; Setup parameters for call to function osal_memcpy
   \   0001BD   75....       MOV     ?V0 + 0,#(_NIB + 33) & 0xff
   \   0001C0   75....       MOV     ?V0 + 1,#((_NIB + 33) >> 8) & 0xff
   \   0001C3   75..00       MOV     ?V0 + 2,#0x0
   \   0001C6   78..         MOV     R0,#?V0 + 0
   \   0001C8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001CB   7C02         MOV     R4,#0x2
   \   0001CD   7D00         MOV     R5,#0x0
   \   0001CF   7A..         MOV     R2,#mypanid & 0xff
   \   0001D1   7B..         MOV     R3,#(mypanid >> 8) & 0xff
   \   0001D3   12....       LCALL   ??osal_memcpy?relay
   \   0001D6   7403         MOV     A,#0x3
   \   0001D8   12....       LCALL   ?DEALLOC_XSTACK8
    348                          PAN_ID[1]=0xFF&mypanid;
   \   0001DB   90....       MOV     DPTR,#mypanid
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   C0E0         PUSH    A
   \   0001E1   740A         MOV     A,#0xa
   \   0001E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E6   D0E0         POP     A
   \   0001E8   F0           MOVX    @DPTR,A
    349                          PAN_ID[0]=0xFF&(mypanid>>8);
   \   0001E9   90....       MOV     DPTR,#mypanid + 1
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   C0E0         PUSH    A
   \   0001EF   7409         MOV     A,#0x9
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   D0E0         POP     A
   \   0001F6   12....       LCALL   ?Subroutine6 & 0xFFFF
    350                          Uart_Write(0xFA,0,PAN_ID,2);
   \                     ??CrossCallReturnLabel_8:
   \   0001F9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FC   740B         MOV     A,#0xb
   \   0001FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000201   AC82         MOV     R4,DPL
   \   000203   AD83         MOV     R5,DPH
   \   000205   7A00         MOV     R2,#0x0
   \   000207   79FA         MOV     R1,#-0x6
   \                     ??Uart_Read_28:
   \   000209   12....       LCALL   ??Uart_Write?relay
   \   00020C   7402         MOV     A,#0x2
   \   00020E   12....       LCALL   ?DEALLOC_XSTACK8
    351                      break;  
    352                      
    353                    case SEND_CHANNEL:
    354          		Uart_Write(0xFB,0,&_NIB.nwkLogicalChannel,1);
    355                      break;
    356                      
    357                    case SEND_SHORTADDR:
    358                          SHORT[1]=0xFF&SHORTADDR_temp;
    359                          SHORT[0]=0xFF&(SHORTADDR_temp>>8);
    360                          Uart_Write(0xFC,0,SHORT,2);
    361                      break;
    362                      
    363                    case SEND_MACADDR:
    364          		Uart_Write(0xFD,0,rftx.myMAC,16);
    365                      break;
    366                      
    367                    case SEND_DEVTYPE:
    368                          if(DEVICE_LOGICAL_TYPE==00){
    369                            Uart_Write(0xFE,0,"COR",3);
    370                          }
    371                          if(DEVICE_LOGICAL_TYPE==01){
    372                            Uart_Write(0xFE,0,"ROU",3);
    373                          }
    374                          if(DEVICE_LOGICAL_TYPE==02){
    375                            Uart_Write(0xFE,0,"END",3);
    376                          }
    377                      break;
    378                      
    379                    case SEND_NWKSTD:
    380                          if(SampleApp_NwkState==DEV_NWK_DISC){
    381                            Uart_Write(0xFF,0,"discovery",9);
    382                          }
    383                          else if(SampleApp_NwkState==DEV_NWK_JOINING){
    384                            Uart_Write(0xFF,0,"join",4);
    385                          }
    386                          else if(SampleApp_NwkState==DEV_NWK_REJOIN){
    387                            Uart_Write(0xFF,0,"rejoin",6);
    388                          }
    389                          else if(SampleApp_NwkState==DEV_NWK_ORPHAN){
    390                            Uart_Write(0xFF,0,"orphan",6);
    391                          }
    392                          else if(SampleApp_NwkState==DEV_END_DEVICE){
    393                            Uart_Write(0xFF,0,"device online as end",20);
    394                          }
    395                          else if(SampleApp_NwkState==DEV_ROUTER){
    396                            Uart_Write(0xFF,0,"device online as rou",20);
    397                          }
    398                          else if(SampleApp_NwkState==DEV_COORD_STARTING){
    399                            Uart_Write(0xFF,0,"bulid net",9);
    400                          }
    401                          else if(SampleApp_NwkState==DEV_ZB_COORD){
    402                            Uart_Write(0xFF,0,"net ready",9);
    403                          }
    404                      break;
    405                      
    406          /**********************************************************************************
    407           *****************************发送数据命令*****************************************
    408                      
    409                      SEND_DATA                   0xF1  //外发数据(协调器为广播，节点为点播至协调器)
    410                      SEND_DATA_P2P               0xF2  //点播数据(协调器专有)
    411                      {0xac len [0xF2 SHORTADDR(2) DATA] ~len 0xef}
    412                   
    413           *****************  UART back data: 0xac len cmd * ~len 0xef   ********************
    414           **********************************************************************************
    415          */         
    416                    case SEND_DATA:
    417                        my_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//设置发送模式为广播
    418                        my_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//初始化端口号
    419                        my_DstAddr.addr.shortAddr=0xFFFF;
    420                        AF_DataRequest(&my_DstAddr,
    421                                      &SampleApp_epDesc,
    422                                      SAMPLEAPP_CLUSTERID,
    423                                      uart_rdlen-1,
    424                                      &uart_rdata[1],
    425                                      &SampleApp_TransID,
    426                                      AF_DISCV_ROUTE,
    427                                      AF_DEFAULT_RADIUS);          
    428                        Uart_Write(0xF1,0,&uart_rdata[1],uart_rdlen-1);
    429                      break; 
    430                      
    431                   case SEND_DATA_P2P:
    432                        my_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;//设置发送模式为点播
    433                        my_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//初始化端口号
    434                        uint16 myaddr_short;
    435                        myaddr_short=(uart_rdata[1]<<8) + uart_rdata[2];
    436                        my_DstAddr.addr.shortAddr=myaddr_short;
    437                        
    438                        AF_DataRequest(&my_DstAddr,
    439                             &SampleApp_epDesc,
    440                             SAMPLEAPP_CLUSTERID,
    441                             uart_rdlen-3,
    442                             &uart_rdata[3],
    443                             &SampleApp_TransID,
    444                             AF_DISCV_ROUTE,
    445                             AF_DEFAULT_RADIUS);          
    446                        //Uart_Write(0xF2,0,&uart_rdata[1],uart_rdlen-1);//调试用
    447                      break; 
    448                   
    449          /**********************************************************************************
    450           *****************************更改配置命令*****************************************
    451                      
    452                      CHANGE_PANID                0xE1  //更改PANID
    453                      CHANGE_CHANNEL              0xE2  //更改信道
    454                      
    455           *****************  UART back data: 0xac len cmd * ~len 0xef   ********************
    456           **********************************************************************************
    457          */         
    458                    case CHANGE_PANID:
    459                         mypanid=(uart_rdata[1]<<8) + uart_rdata[2];
    460                         Change_panid[0]=0xE1;
    461                         Change_panid[1]=uart_rdata[1];
    462                         Change_panid[2]=uart_rdata[2];
    463                         Change_panid[3]=0xFF;
    464                          my_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//设置发送模式为广播
    465                          my_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//初始化端口号
    466                          my_DstAddr.addr.shortAddr=0xFFFF;
    467                         AF_DataRequest(&my_DstAddr,
    468                             &SampleApp_epDesc,
    469                             SAMPLEAPP_CLUSTERID,
    470                             4,
    471                             &Change_panid[0],
    472                             &SampleApp_TransID,
    473                             AF_DISCV_ROUTE,
    474                             AF_DEFAULT_RADIUS);
    475                          osal_start_timerEx( SampleApp_TaskID,
    476                                CHANGE_PANID_EVT,
    477                                3000 );
    478                      break; 
    479                      
    480                   case CHANGE_CHANNEL:
    481          
    482                        mychannel=uart_rdata[1];
    483                        
    484                        if(mychannel<0x0B||mychannel>0x1A){
    485                        HalUARTWrite(0,"wrong channel",13);
    486                        }
    487                        else{
    488                        brodata[0]=0xFE;
    489                        brodata[1]=uart_rdata[1];
    490                        brodata[2]=0;
    491                        brodata[3]=0xFF;
    492                        my_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//设置发送模式为广播
    493                        my_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//初始化端口号
    494                        my_DstAddr.addr.shortAddr=0xFFFF;
    495                        //zb_WriteConfiguration(ZCD_NV_PANID, sizeof(uint16),  &mychannel);
    496                        //HalUARTWrite(0,&uart_rdata[1],1);
    497                        AF_DataRequest(&my_DstAddr,
    498                                        &SampleApp_epDesc,
    499                                        SAMPLEAPP_CLUSTERID,
    500                                        4,
    501                                        &brodata[0],
    502                                        &SampleApp_TransID,
    503                                        AF_DISCV_ROUTE,
    504                                        AF_DEFAULT_RADIUS);
    505                        
    506                        _NIB.nwkLogicalChannel = mychannel;
    507                        NLME_UpdateNV(0x01);
    508                        osal_nv_write(ZCD_NV_CHANLIST, 0, osal_nv_item_len( ZCD_NV_CHANLIST ), &zgConfigPANID);
    509                        osal_start_timerEx( SampleApp_TaskID,
    510                              SAMPLEAPP_RESET_EVT,
    511                              1000 );
    512                        
    513                        /*zb_WriteConfiguration(ZCD_NV_PANID, sizeof(uint16),  &pan_id) ;
    514                        zb_SystemReset();
    515                      
    516                        ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
    517                        uint32 ChannelMask,
    518                        uint8 ScanDuration,
    519                        uint8 ScanCount,
    520                        uint8 NwkUpdateId,
    521                        uint16 NwkManagerAddr )
    522                      
    523                        MgmtNwkUpdateReqFormat_t req;
    524                        req.DstAddr=0xFFFF;
    525                        req.DstAddrMode=AddrBroadcast;
    526                        req.ChannelMask[0]=BREAK_UINT32(newChanList,0);
    527                        req.ChannelMask[1]=BREAK_UINT32(newChanList,1);
    528                        req.ChannelMask[2]=BREAK_UINT32(newChanList,2);
    529                        req.ChannelMask[3]=BREAK_UINT32(newChanList,3);
    530                        req.ScanDuration=0xFE;      //Request is to change Channel
    531                        req.ScanCount=0;                //don't care
    532                        req.NwkManagerAddr=0;       //don't care
    533                        zdoMgmtNwkUpdateReq(&req);*/
    534                      
    535                        
    536                        }
    537                      break;  
    538                      
    539          /**********************************************************************************
    540           *****************************设备相关命令*****************************************
    541                      
    542                      CNTDEVNUM                   0xD1  //统计入网设备数量(*****)
    543                      SEND_BACK                   0xD2  //打开(协调器接收数据回传到发送端）
    544                      SEND_BACK_CANCEL            0xD3  //关闭(协调器接收数据回传到发送端）
    545                      
    546           *****************  UART back data: 0xac len cmd * ~len 0xef   ********************
    547           **********************************************************************************
    548          */    
    549                  case CNTDEVNUM:
    550                       Change_panid[0]=0xD1;
    551                       Change_panid[1]=0xD2;
    552                       Change_panid[2]=0xD3;
    553                       Change_panid[3]=0xFF;
    554                       AF_DataRequest(&my_DstAddr,
    555                                      &SampleApp_epDesc,
    556                                      SAMPLEAPP_CLUSTERID,
    557                                      4,
    558                                      &Change_panid[0],
    559                                      &SampleApp_TransID,
    560                                      AF_DISCV_ROUTE,
    561                                      AF_DEFAULT_RADIUS);
    562                        //HalUARTWrite(0,Change_panid,4);
    563                        //osal_set_event(SampleApp_TaskID,CNT_NUM_EVT);
    564                    break;
    565                      
    566                  case SEND_BACK:
    567                      sendback_flag=1;
    568                    break; 
    569                  
    570                  case SEND_BACK_CANCEL:
    571                      sendback_flag=0;
    572                    break;
    573                                      
    574          /**********************************************************************************
    575           *****************************复位命令*********************************************
    576                      
    577                      SEND_RESET                  0xDF  //复位
    578                      
    579           *****************  UART back data: 0xac len cmd * ~len 0xef   ********************
    580           **********************************************************************************
    581          */          
    582                   case SEND_RESET:
    583                          SystemReset();
    584                      break;
    585                   default:
    586                      break;
    587                      
    588                  }
    589            }
    590            //afIncomingMSGPacket_t *MSGpkt;
    591            //MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
    592            //SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    593          }
   \                     ??Uart_Read_13:
   \   000211   7430         MOV     A,#0x30
   \   000213   02....       LJMP    ?Subroutine1 & 0xFFFF
   \                     ??Uart_Read_23:
   \   000216                ; Setup parameters for call to function Uart_Write
   \   000216   75..01       MOV     ?V0 + 0,#0x1
   \   000219   75..00       MOV     ?V0 + 1,#0x0
   \   00021C   78..         MOV     R0,#?V0 + 0
   \   00021E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000221   7C..         MOV     R4,#(_NIB + 22) & 0xff
   \   000223   7D..         MOV     R5,#((_NIB + 22) >> 8) & 0xff
   \   000225   7A00         MOV     R2,#0x0
   \   000227   79FB         MOV     R1,#-0x5
   \   000229   80DE         SJMP    ??Uart_Read_28
   \                     ??Uart_Read_24:
   \   00022B   7405         MOV     A,#0x5
   \   00022D   12....       LCALL   ?XSTACK_DISP0_8
   \   000230   E0           MOVX    A,@DPTR
   \   000231   C0E0         PUSH    A
   \   000233   7408         MOV     A,#0x8
   \   000235   12....       LCALL   ?XSTACK_DISP0_8
   \   000238   D0E0         POP     A
   \   00023A   F0           MOVX    @DPTR,A
   \   00023B   7405         MOV     A,#0x5
   \   00023D   12....       LCALL   ?XSTACK_DISP0_8
   \   000240   A3           INC     DPTR
   \   000241   E0           MOVX    A,@DPTR
   \   000242   C0E0         PUSH    A
   \   000244   7407         MOV     A,#0x7
   \   000246   12....       LCALL   ?XSTACK_DISP0_8
   \   000249   D0E0         POP     A
   \   00024B   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00024E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000251   7409         MOV     A,#0x9
   \   000253   12....       LCALL   ?XSTACK_DISP0_8
   \   000256   AC82         MOV     R4,DPL
   \   000258   AD83         MOV     R5,DPH
   \   00025A   7A00         MOV     R2,#0x0
   \   00025C   79FC         MOV     R1,#-0x4
   \   00025E   80A9         SJMP    ??Uart_Read_28
   \                     ??Uart_Read_25:
   \   000260                ; Setup parameters for call to function Uart_Write
   \   000260   75..10       MOV     ?V0 + 0,#0x10
   \   000263   75..00       MOV     ?V0 + 1,#0x0
   \   000266   78..         MOV     R0,#?V0 + 0
   \   000268   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026B   7422         MOV     A,#0x22
   \   00026D   12....       LCALL   ?XSTACK_DISP0_8
   \   000270   AC82         MOV     R4,DPL
   \   000272   AD83         MOV     R5,DPH
   \   000274   7A00         MOV     R2,#0x0
   \   000276   79FD         MOV     R1,#-0x3
   \   000278   808F         SJMP    ??Uart_Read_28
   \                     ??Uart_Read_26:
   \   00027A                ; Setup parameters for call to function Uart_Write
   \   00027A   75..03       MOV     ?V0 + 0,#0x3
   \   00027D   75..00       MOV     ?V0 + 1,#0x0
   \   000280   78..         MOV     R0,#?V0 + 0
   \   000282   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000285   7C..         MOV     R4,#`?<Constant "COR">` & 0xff
   \   000287   7D..         MOV     R5,#(`?<Constant "COR">` >> 8) & 0xff
   \   000289   7A00         MOV     R2,#0x0
   \   00028B   79FE         MOV     R1,#-0x2
   \   00028D   02....       LJMP    ??Uart_Read_28 & 0xFFFF
   \                     ??Uart_Read_27:
   \   000290   90....       MOV     DPTR,#SampleApp_NwkState
   \   000293   E0           MOVX    A,@DPTR
   \   000294   6402         XRL     A,#0x2
   \   000296   7016         JNZ     ??Uart_Read_29
   \   000298                ; Setup parameters for call to function Uart_Write
   \   000298   75..09       MOV     ?V0 + 0,#0x9
   \   00029B   75..00       MOV     ?V0 + 1,#0x0
   \   00029E   78..         MOV     R0,#?V0 + 0
   \   0002A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A3   7C..         MOV     R4,#`?<Constant "discovery">` & 0xff
   \   0002A5   7D..         MOV     R5,#(`?<Constant "discovery">` >> 8) & 0xff
   \                     ??Uart_Read_30:
   \   0002A7   7A00         MOV     R2,#0x0
   \   0002A9   79FF         MOV     R1,#-0x1
   \   0002AB   02....       LJMP    ??Uart_Read_28 & 0xFFFF
   \                     ??Uart_Read_29:
   \   0002AE   E0           MOVX    A,@DPTR
   \   0002AF   6403         XRL     A,#0x3
   \   0002B1   7011         JNZ     ??Uart_Read_31
   \   0002B3                ; Setup parameters for call to function Uart_Write
   \   0002B3   75..04       MOV     ?V0 + 0,#0x4
   \   0002B6   75..00       MOV     ?V0 + 1,#0x0
   \   0002B9   78..         MOV     R0,#?V0 + 0
   \   0002BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002BE   7C..         MOV     R4,#`?<Constant "join">` & 0xff
   \   0002C0   7D..         MOV     R5,#(`?<Constant "join">` >> 8) & 0xff
   \   0002C2   80E3         SJMP    ??Uart_Read_30
   \                     ??Uart_Read_31:
   \   0002C4   E0           MOVX    A,@DPTR
   \   0002C5   6404         XRL     A,#0x4
   \   0002C7   7011         JNZ     ??Uart_Read_32
   \   0002C9                ; Setup parameters for call to function Uart_Write
   \   0002C9   75..06       MOV     ?V0 + 0,#0x6
   \   0002CC   75..00       MOV     ?V0 + 1,#0x0
   \   0002CF   78..         MOV     R0,#?V0 + 0
   \   0002D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002D4   7C..         MOV     R4,#`?<Constant "rejoin">` & 0xff
   \   0002D6   7D..         MOV     R5,#(`?<Constant "rejoin">` >> 8) & 0xff
   \   0002D8   80CD         SJMP    ??Uart_Read_30
   \                     ??Uart_Read_32:
   \   0002DA   E0           MOVX    A,@DPTR
   \   0002DB   640A         XRL     A,#0xa
   \   0002DD   7011         JNZ     ??Uart_Read_33
   \   0002DF                ; Setup parameters for call to function Uart_Write
   \   0002DF   75..06       MOV     ?V0 + 0,#0x6
   \   0002E2   75..00       MOV     ?V0 + 1,#0x0
   \   0002E5   78..         MOV     R0,#?V0 + 0
   \   0002E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002EA   7C..         MOV     R4,#`?<Constant "orphan">` & 0xff
   \   0002EC   7D..         MOV     R5,#(`?<Constant "orphan">` >> 8) & 0xff
   \   0002EE   80B7         SJMP    ??Uart_Read_30
   \                     ??Uart_Read_33:
   \   0002F0   E0           MOVX    A,@DPTR
   \   0002F1   6406         XRL     A,#0x6
   \   0002F3   7011         JNZ     ??Uart_Read_34
   \   0002F5                ; Setup parameters for call to function Uart_Write
   \   0002F5   75..14       MOV     ?V0 + 0,#0x14
   \   0002F8   75..00       MOV     ?V0 + 1,#0x0
   \   0002FB   78..         MOV     R0,#?V0 + 0
   \   0002FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000300   7C..         MOV     R4,#`?<Constant "device online as end">` & 0xff
   \   000302   7D..         MOV     R5,#(`?<Constant "device online as end">` >> 8) & 0xff
   \   000304   80A1         SJMP    ??Uart_Read_30
   \                     ??Uart_Read_34:
   \   000306   E0           MOVX    A,@DPTR
   \   000307   6407         XRL     A,#0x7
   \   000309   7011         JNZ     ??Uart_Read_35
   \   00030B                ; Setup parameters for call to function Uart_Write
   \   00030B   75..14       MOV     ?V0 + 0,#0x14
   \   00030E   75..00       MOV     ?V0 + 1,#0x0
   \   000311   78..         MOV     R0,#?V0 + 0
   \   000313   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000316   7C..         MOV     R4,#`?<Constant "device online as rou">` & 0xff
   \   000318   7D..         MOV     R5,#(`?<Constant "device online as rou">` >> 8) & 0xff
   \   00031A   808B         SJMP    ??Uart_Read_30
   \                     ??Uart_Read_35:
   \   00031C   E0           MOVX    A,@DPTR
   \   00031D   6408         XRL     A,#0x8
   \   00031F   7012         JNZ     ??Uart_Read_36
   \   000321                ; Setup parameters for call to function Uart_Write
   \   000321   75..09       MOV     ?V0 + 0,#0x9
   \   000324   75..00       MOV     ?V0 + 1,#0x0
   \   000327   78..         MOV     R0,#?V0 + 0
   \   000329   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00032C   7C..         MOV     R4,#`?<Constant "bulid net">` & 0xff
   \   00032E   7D..         MOV     R5,#(`?<Constant "bulid net">` >> 8) & 0xff
   \   000330   02....       LJMP    ??Uart_Read_30 & 0xFFFF
   \                     ??Uart_Read_36:
   \   000333   E0           MOVX    A,@DPTR
   \   000334   6409         XRL     A,#0x9
   \   000336   6003         JZ      $+5
   \   000338   02....       LJMP    ??Uart_Read_13 & 0xFFFF
   \   00033B                ; Setup parameters for call to function Uart_Write
   \   00033B   75..09       MOV     ?V0 + 0,#0x9
   \   00033E   75..00       MOV     ?V0 + 1,#0x0
   \   000341   78..         MOV     R0,#?V0 + 0
   \   000343   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000346   7C..         MOV     R4,#`?<Constant "net ready">` & 0xff
   \   000348   7D..         MOV     R5,#(`?<Constant "net ready">` >> 8) & 0xff
   \   00034A   02....       LJMP    ??Uart_Read_30 & 0xFFFF
   \                     ??Uart_Read_20:
   \   00034D   7417         MOV     A,#0x17
   \   00034F   12....       LCALL   ?XSTACK_DISP0_8
   \   000352   740F         MOV     A,#0xf
   \   000354   F0           MOVX    @DPTR,A
   \   000355   7418         MOV     A,#0x18
   \   000357   12....       LCALL   ?XSTACK_DISP0_8
   \   00035A   7414         MOV     A,#0x14
   \   00035C   F0           MOVX    @DPTR,A
   \   00035D   740F         MOV     A,#0xf
   \   00035F   12....       LCALL   ?XSTACK_DISP0_8
   \   000362   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000365   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000368   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00036B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00036E   78..         MOV     R0,#?V0 + 0
   \   000370   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000373   75....       MOV     ?V0 + 0,#(uart_rdata + 1) & 0xff
   \   000376   75....       MOV     ?V0 + 1,#((uart_rdata + 1) >> 8) & 0xff
   \   000379   78..         MOV     R0,#?V0 + 0
   \   00037B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00037E   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000381   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000384   75..01       MOV     ?V0 + 0,#0x1
   \   000387   75..00       MOV     ?V0 + 1,#0x0
   \   00038A   78..         MOV     R0,#?V0 + 0
   \   00038C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00038F   7920         MOV     R1,#0x20
   \   000391   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000393   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000395   7418         MOV     A,#0x18
   \   000397   12....       LCALL   ?XSTACK_DISP0_8
   \   00039A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00039D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003A0                ; Setup parameters for call to function Uart_Write
   \   0003A0   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0003A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003A6   7C..         MOV     R4,#(uart_rdata + 1) & 0xff
   \   0003A8   7D..         MOV     R5,#((uart_rdata + 1) >> 8) & 0xff
   \   0003AA   7A00         MOV     R2,#0x0
   \   0003AC   79F1         MOV     R1,#-0xf
   \   0003AE   02....       LJMP    ??Uart_Read_28 & 0xFFFF
   \                     ??Uart_Read_21:
   \   0003B1   7417         MOV     A,#0x17
   \   0003B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B6   7402         MOV     A,#0x2
   \   0003B8   F0           MOVX    @DPTR,A
   \   0003B9   7418         MOV     A,#0x18
   \   0003BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003BE   7414         MOV     A,#0x14
   \   0003C0   F0           MOVX    @DPTR,A
   \   0003C1   90....       MOV     DPTR,#uart_rdata + 1
   \   0003C4   E0           MOVX    A,@DPTR
   \   0003C5   F9           MOV     R1,A
   \   0003C6   A3           INC     DPTR
   \   0003C7   E0           MOVX    A,@DPTR
   \   0003C8   F8           MOV     R0,A
   \   0003C9   740F         MOV     A,#0xf
   \   0003CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CE   E8           MOV     A,R0
   \   0003CF   F0           MOVX    @DPTR,A
   \   0003D0   A3           INC     DPTR
   \   0003D1   E9           MOV     A,R1
   \   0003D2   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0003D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003D8   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0003DB   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0003DE   78..         MOV     R0,#?V0 + 0
   \   0003E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003E3   75....       MOV     ?V0 + 0,#(uart_rdata + 3) & 0xff
   \   0003E6   75....       MOV     ?V0 + 1,#((uart_rdata + 3) >> 8) & 0xff
   \   0003E9   78..         MOV     R0,#?V0 + 0
   \   0003EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003EE   90....       MOV     DPTR,#uart_rdlen
   \   0003F1   E0           MOVX    A,@DPTR
   \   0003F2   24FD         ADD     A,#-0x3
   \   0003F4   F5..         MOV     ?V0 + 0,A
   \   0003F6   E4           CLR     A
   \   0003F7   34FF         ADDC    A,#-0x1
   \   0003F9   F5..         MOV     ?V0 + 1,A
   \   0003FB   78..         MOV     R0,#?V0 + 0
   \   0003FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000400   75..01       MOV     ?V0 + 0,#0x1
   \   000403   75..00       MOV     ?V0 + 1,#0x0
   \                     ??Uart_Read_37:
   \   000406   78..         MOV     R0,#?V0 + 0
   \   000408   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00040B   7920         MOV     R1,#0x20
   \   00040D   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00040F   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000411   7418         MOV     A,#0x18
   \   000413   12....       LCALL   ?XSTACK_DISP0_8
   \   000416   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000419   12....       LCALL   ?DEALLOC_XSTACK8
   \   00041C   02....       LJMP    ??Uart_Read_13 & 0xFFFF
   \                     ??Uart_Read_18:
   \   00041F   90....       MOV     DPTR,#uart_rdata + 2
   \   000422   E0           MOVX    A,@DPTR
   \   000423   FB           MOV     R3,A
   \   000424   90....       MOV     DPTR,#uart_rdata + 1
   \   000427   E0           MOVX    A,@DPTR
   \   000428   F8           MOV     R0,A
   \   000429   F9           MOV     R1,A
   \   00042A   EB           MOV     A,R3
   \   00042B   90....       MOV     DPTR,#mypanid
   \   00042E   F0           MOVX    @DPTR,A
   \   00042F   A3           INC     DPTR
   \   000430   E9           MOV     A,R1
   \   000431   F0           MOVX    @DPTR,A
   \   000432   7401         MOV     A,#0x1
   \   000434   12....       LCALL   ?XSTACK_DISP0_8
   \   000437   74E1         MOV     A,#-0x1f
   \   000439   F0           MOVX    @DPTR,A
   \   00043A   7402         MOV     A,#0x2
   \   00043C   12....       LCALL   ?XSTACK_DISP0_8
   \   00043F   E8           MOV     A,R0
   \   000440   F0           MOVX    @DPTR,A
   \   000441   7403         MOV     A,#0x3
   \   000443   12....       LCALL   ?XSTACK_DISP0_8
   \   000446   EB           MOV     A,R3
   \   000447   F0           MOVX    @DPTR,A
   \   000448   7404         MOV     A,#0x4
   \   00044A   12....       LCALL   ?XSTACK_DISP0_8
   \   00044D   74FF         MOV     A,#-0x1
   \   00044F   F0           MOVX    @DPTR,A
   \   000450   7417         MOV     A,#0x17
   \   000452   12....       LCALL   ?XSTACK_DISP0_8
   \   000455   740F         MOV     A,#0xf
   \   000457   F0           MOVX    @DPTR,A
   \   000458   7418         MOV     A,#0x18
   \   00045A   12....       LCALL   ?XSTACK_DISP0_8
   \   00045D   7414         MOV     A,#0x14
   \   00045F   F0           MOVX    @DPTR,A
   \   000460   740F         MOV     A,#0xf
   \   000462   12....       LCALL   ?XSTACK_DISP0_8
   \   000465   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000468   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00046B   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00046E   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000471   78..         MOV     R0,#?V0 + 0
   \   000473   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000476   7404         MOV     A,#0x4
   \   000478   12....       LCALL   ?XSTACK_DISP0_8
   \   00047B   8582..       MOV     ?V0 + 0,DPL
   \   00047E   8583..       MOV     ?V0 + 1,DPH
   \   000481   78..         MOV     R0,#?V0 + 0
   \   000483   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000486   75..04       MOV     ?V0 + 0,#0x4
   \   000489   75..00       MOV     ?V0 + 1,#0x0
   \   00048C   78..         MOV     R0,#?V0 + 0
   \   00048E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000491   75..01       MOV     ?V0 + 0,#0x1
   \   000494   78..         MOV     R0,#?V0 + 0
   \   000496   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000499   7920         MOV     R1,#0x20
   \   00049B   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00049D   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00049F   7418         MOV     A,#0x18
   \   0004A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0004A4   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0004A7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004AA                ; Setup parameters for call to function osal_start_timerEx
   \   0004AA   7CB8         MOV     R4,#-0x48
   \   0004AC   7D0B         MOV     R5,#0xb
   \   0004AE   7A03         MOV     R2,#0x3
   \                     ??Uart_Read_38:
   \   0004B0   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0004B3   02....       LJMP    ??Uart_Read_13 & 0xFFFF
   \                     ??Uart_Read_19:
   \   0004B6   A3           INC     DPTR
   \   0004B7   E0           MOVX    A,@DPTR
   \   0004B8   FE           MOV     R6,A
   \   0004B9   74F5         MOV     A,#-0xb
   \   0004BB   2E           ADD     A,R6
   \   0004BC   C3           CLR     C
   \   0004BD   9410         SUBB    A,#0x10
   \   0004BF   4010         JC      ??Uart_Read_39
   \   0004C1                ; Setup parameters for call to function HalUARTWrite
   \   0004C1   7C0D         MOV     R4,#0xd
   \   0004C3   7D00         MOV     R5,#0x0
   \   0004C5   7A..         MOV     R2,#`?<Constant "wrong channel">` & 0xff
   \   0004C7   7B..         MOV     R3,#(`?<Constant "wrong channel">` >> 8) & 0xff
   \   0004C9   7900         MOV     R1,#0x0
   \   0004CB   12....       LCALL   ??HalUARTWrite?relay
   \   0004CE   02....       LJMP    ??Uart_Read_13 & 0xFFFF
   \                     ??Uart_Read_39:
   \   0004D1   740B         MOV     A,#0xb
   \   0004D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0004D6   74FE         MOV     A,#-0x2
   \   0004D8   F0           MOVX    @DPTR,A
   \   0004D9   90....       MOV     DPTR,#uart_rdata + 1
   \   0004DC   E0           MOVX    A,@DPTR
   \   0004DD   C0E0         PUSH    A
   \   0004DF   740C         MOV     A,#0xc
   \   0004E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0004E4   D0E0         POP     A
   \   0004E6   F0           MOVX    @DPTR,A
   \   0004E7   740D         MOV     A,#0xd
   \   0004E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0004EC   E4           CLR     A
   \   0004ED   F0           MOVX    @DPTR,A
   \   0004EE   740E         MOV     A,#0xe
   \   0004F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0004F3   74FF         MOV     A,#-0x1
   \   0004F5   F0           MOVX    @DPTR,A
   \   0004F6   7417         MOV     A,#0x17
   \   0004F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0004FB   740F         MOV     A,#0xf
   \   0004FD   F0           MOVX    @DPTR,A
   \   0004FE   7418         MOV     A,#0x18
   \   000500   12....       LCALL   ?XSTACK_DISP0_8
   \   000503   7414         MOV     A,#0x14
   \   000505   F0           MOVX    @DPTR,A
   \   000506   740F         MOV     A,#0xf
   \   000508   12....       LCALL   ?XSTACK_DISP0_8
   \   00050B   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00050E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000511   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000514   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000517   78..         MOV     R0,#?V0 + 0
   \   000519   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00051C   740E         MOV     A,#0xe
   \   00051E   12....       LCALL   ?XSTACK_DISP0_8
   \   000521   8582..       MOV     ?V0 + 0,DPL
   \   000524   8583..       MOV     ?V0 + 1,DPH
   \   000527   78..         MOV     R0,#?V0 + 0
   \   000529   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00052C   75..04       MOV     ?V0 + 0,#0x4
   \   00052F   75..00       MOV     ?V0 + 1,#0x0
   \   000532   78..         MOV     R0,#?V0 + 0
   \   000534   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000537   75..01       MOV     ?V0 + 0,#0x1
   \   00053A   78..         MOV     R0,#?V0 + 0
   \   00053C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00053F   7920         MOV     R1,#0x20
   \   000541   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000543   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000545   7418         MOV     A,#0x18
   \   000547   12....       LCALL   ?XSTACK_DISP0_8
   \   00054A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00054D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000550   EE           MOV     A,R6
   \   000551   90....       MOV     DPTR,#_NIB + 22
   \   000554   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000557   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00055A                ; Setup parameters for call to function osal_nv_item_len
   \   00055A   7A84         MOV     R2,#-0x7c
   \   00055C   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00055F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000562   7C00         MOV     R4,#0x0
   \   000564   7D00         MOV     R5,#0x0
   \   000566   7A84         MOV     R2,#-0x7c
   \   000568   7B00         MOV     R3,#0x0
   \   00056A   12....       LCALL   ??osal_nv_write?relay
   \   00056D   7404         MOV     A,#0x4
   \   00056F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000572                ; Setup parameters for call to function osal_start_timerEx
   \   000572   7CE8         MOV     R4,#-0x18
   \   000574   7D03         MOV     R5,#0x3
   \   000576   7A0F         MOV     R2,#0xf
   \   000578   02....       LJMP    ??Uart_Read_38 & 0xFFFF
   \                     ??Uart_Read_14:
   \   00057B   7401         MOV     A,#0x1
   \   00057D   12....       LCALL   ?XSTACK_DISP0_8
   \   000580   74D1         MOV     A,#-0x2f
   \   000582   F0           MOVX    @DPTR,A
   \   000583   7402         MOV     A,#0x2
   \   000585   12....       LCALL   ?XSTACK_DISP0_8
   \   000588   74D2         MOV     A,#-0x2e
   \   00058A   F0           MOVX    @DPTR,A
   \   00058B   7403         MOV     A,#0x3
   \   00058D   12....       LCALL   ?XSTACK_DISP0_8
   \   000590   74D3         MOV     A,#-0x2d
   \   000592   F0           MOVX    @DPTR,A
   \   000593   7404         MOV     A,#0x4
   \   000595   12....       LCALL   ?XSTACK_DISP0_8
   \   000598   74FF         MOV     A,#-0x1
   \   00059A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00059D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0005A0   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0005A3   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0005A6   78..         MOV     R0,#?V0 + 0
   \   0005A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005AB   7404         MOV     A,#0x4
   \   0005AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0005B0   8582..       MOV     ?V0 + 0,DPL
   \   0005B3   8583..       MOV     ?V0 + 1,DPH
   \   0005B6   78..         MOV     R0,#?V0 + 0
   \   0005B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005BB   75..04       MOV     ?V0 + 0,#0x4
   \   0005BE   75..00       MOV     ?V0 + 1,#0x0
   \   0005C1   78..         MOV     R0,#?V0 + 0
   \   0005C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005C6   75..01       MOV     ?V0 + 0,#0x1
   \   0005C9   02....       LJMP    ??Uart_Read_37 & 0xFFFF
   \                     ??Uart_Read_15:
   \   0005CC   90....       MOV     DPTR,#sendback_flag
   \   0005CF   7401         MOV     A,#0x1
   \                     ??Uart_Read_40:
   \   0005D1   F0           MOVX    @DPTR,A
   \   0005D2   02....       LJMP    ??Uart_Read_13 & 0xFFFF
   \                     ??Uart_Read_16:
   \   0005D5   90....       MOV     DPTR,#sendback_flag
   \   0005D8   E4           CLR     A
   \   0005D9   80F6         SJMP    ??Uart_Read_40
   \                     ??Uart_Read_17:
   \   0005DB   C2AF         CLR     0xa8.7
   \   0005DD   C2AF         CLR     0xa8.7
   \   0005DF   75C9AB       MOV     0xc9,#-0x55
   \   0005E2   75C95B       MOV     0xc9,#0x5b
   \                     ??Uart_Read_41:
   \   0005E5   80FE         SJMP    ??Uart_Read_41
   \   0005E7                REQUIRE _A_IEN0
   \   0005E7                REQUIRE WDCTL

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#uart_rdlen
   \   000003   E0           MOVX    A,@DPTR
   \   000004   24FF         ADD     A,#-0x1
   \   000006   F5..         MOV     ?V0 + 0,A
   \   000008   E4           CLR     A
   \   000009   34FF         ADDC    A,#-0x1
   \   00000B   F5..         MOV     ?V0 + 1,A
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function Uart_Write
   \   000001                ; Setup parameters for call to function Uart_Write
   \   000001   75..02       MOV     ?V0 + 0,#0x2
   \   000004   75..00       MOV     ?V0 + 1,#0x0
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??AF_DataRequest?relay
   \   000007   7409         MOV     A,#0x9
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   74FF         MOV     A,#-0x1
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001   75..1E       MOV     ?V0 + 0,#0x1e
   \   000004   78..         MOV     R0,#?V0 + 0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    594          /*********************************************************************
    595           * @fn      Uart_Write
    596           *
    597           * @brief   
    598           *
    599           * @param   none
    600           *
    601           * @return  none
    602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    603          void Uart_Write(uint8 cmd,uint8 port,uint8 *buf, uint16 len)
   \                     Uart_Write:
    604          {   
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 256
   \   000005   758200       MOV     DPL,#0x0
   \   000008   7583FF       MOV     DPH,#-0x1
   \   00000B   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   00000E   E9           MOV     A,R1
   \   00000F   FF           MOV     R7,A
   \   000010   EA           MOV     A,R2
   \   000011   FE           MOV     R6,A
   \   000012   758209       MOV     DPL,#0x9
   \   000015   758301       MOV     DPH,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_16
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
    605              uint8 uartbuf[256];
    606              uartbuf[0]=0xac; 
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   74AC         MOV     A,#-0x54
   \   000028   F0           MOVX    @DPTR,A
    607              uartbuf[1]=len+1;
   \   000029   E8           MOV     A,R0
   \   00002A   04           INC     A
   \   00002B   C0E0         PUSH    A
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
    608              uartbuf[2]=cmd;
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   EF           MOV     A,R7
   \   00003B   F0           MOVX    @DPTR,A
    609              int i;
    610              for(i=0;i<len;i++){
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   8029         SJMP    ??Uart_Write_0
    611                uartbuf[i+3]=buf[i];
   \                     ??Uart_Write_1:
   \   000042   EC           MOV     A,R4
   \   000043   2A           ADD     A,R2
   \   000044   F582         MOV     DPL,A
   \   000046   ED           MOV     A,R5
   \   000047   3B           ADDC    A,R3
   \   000048   F583         MOV     DPH,A
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C0E0         PUSH    A
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   E582         MOV     A,DPL
   \   000055   2A           ADD     A,R2
   \   000056   F582         MOV     DPL,A
   \   000058   E583         MOV     A,DPH
   \   00005A   3B           ADDC    A,R3
   \   00005B   F583         MOV     DPH,A
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   D0E0         POP     A
   \   000062   F0           MOVX    @DPTR,A
    612              }
   \   000063   EA           MOV     A,R2
   \   000064   2401         ADD     A,#0x1
   \   000066   0A           INC     R2
   \   000067   EB           MOV     A,R3
   \   000068   3400         ADDC    A,#0x0
   \   00006A   FB           MOV     R3,A
   \                     ??Uart_Write_0:
   \   00006B   C3           CLR     C
   \   00006C   EA           MOV     A,R2
   \   00006D   98           SUBB    A,R0
   \   00006E   EB           MOV     A,R3
   \   00006F   99           SUBB    A,R1
   \   000070   40D0         JC      ??Uart_Write_1
    613              uartbuf[len+3]=~uartbuf[1];
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   E582         MOV     A,DPL
   \   00007A   28           ADD     A,R0
   \   00007B   FA           MOV     R2,A
   \   00007C   E583         MOV     A,DPH
   \   00007E   39           ADDC    A,R1
   \   00007F   FB           MOV     R3,A
   \   000080   7401         MOV     A,#0x1
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F4           CPL     A
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   F0           MOVX    @DPTR,A
    614              uartbuf[len+4]=0xef;   
   \   00008F   8A82         MOV     DPL,R2
   \   000091   8B83         MOV     DPH,R3
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   74EF         MOV     A,#-0x11
   \   000099   F0           MOVX    @DPTR,A
    615              HalUARTWrite(port,&uartbuf[0],len+5);
   \   00009A                ; Setup parameters for call to function HalUARTWrite
   \   00009A   E8           MOV     A,R0
   \   00009B   2405         ADD     A,#0x5
   \   00009D   FC           MOV     R4,A
   \   00009E   E9           MOV     A,R1
   \   00009F   3400         ADDC    A,#0x0
   \   0000A1   FD           MOV     R5,A
   \   0000A2   85..82       MOV     DPL,?XSP + 0
   \   0000A5   85..83       MOV     DPH,?XSP + 1
   \   0000A8   AA82         MOV     R2,DPL
   \   0000AA   AB83         MOV     R3,DPH
   \   0000AC   EE           MOV     A,R6
   \   0000AD   F9           MOV     R1,A
   \   0000AE   12....       LCALL   ??HalUARTWrite?relay
    616          }
   \   0000B1   758200       MOV     DPL,#0x0
   \   0000B4   758301       MOV     DPH,#0x1
   \   0000B7   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   0000BA   02....       LJMP    ?Subroutine0 & 0xFFFF
    617          
    618          /*********************************************************************
    619           * @fn      To_string
    620           *
    621           * @brief   
    622           *
    623           * @param   none
    624           *
    625           * @return  none
    626           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    627          void To_string(uint8 * dest, char * src, uint8 length)
   \                     To_string:
    628          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    629              uint8 *xad;
    630              uint8 i=0;
    631              uint8 ch;
    632              xad=src+length-1;
                        ^
Warning[Pe513]: a value of type "char *" cannot be assigned to an entity of
          type "unsigned char *"
   \   000007   8E..         MOV     ?V0 + 0,R6
   \   000009   EC           MOV     A,R4
   \   00000A   25..         ADD     A,?V0 + 0
   \   00000C   F8           MOV     R0,A
   \   00000D   ED           MOV     A,R5
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   24FF         ADD     A,#-0x1
   \   000014   18           DEC     R0
   \   000015   E9           MOV     A,R1
   \   000016   34FF         ADDC    A,#-0x1
   \   000018   F9           MOV     R1,A
    633              for(i=0;i<length;i++,xad--){
   \   000019   7F00         MOV     R7,#0x0
   \   00001B   8020         SJMP    ??To_string_0
    634                  ch=(*xad>>4)&0x0F;
    635                  dest[i<<1]=ch+((ch<10)?'0':'7');
    636                  ch=*xad&0x0F;
    637                  dest[(i<<1)+1]=ch+((ch<10)?'0':'7');                    
   \                     ??To_string_1:
   \   00001D   7C37         MOV     R4,#0x37
   \                     ??To_string_2:
   \   00001F   EC           MOV     A,R4
   \   000020   25..         ADD     A,?V0 + 0
   \   000022   C0E0         PUSH    A
   \   000024   EF           MOV     A,R7
   \   000025   C3           CLR     C
   \   000026   33           RLC     A
   \   000027   FC           MOV     R4,A
   \   000028   EA           MOV     A,R2
   \   000029   2C           ADD     A,R4
   \   00002A   F582         MOV     DPL,A
   \   00002C   EB           MOV     A,R3
   \   00002D   3D           ADDC    A,R5
   \   00002E   F583         MOV     DPH,A
   \   000030   A3           INC     DPTR
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   0F           INC     R7
   \   000035   E8           MOV     A,R0
   \   000036   24FF         ADD     A,#-0x1
   \   000038   18           DEC     R0
   \   000039   E9           MOV     A,R1
   \   00003A   34FF         ADDC    A,#-0x1
   \   00003C   F9           MOV     R1,A
   \                     ??To_string_0:
   \   00003D   EF           MOV     A,R7
   \   00003E   C3           CLR     C
   \   00003F   9E           SUBB    A,R6
   \   000040   503E         JNC     ??To_string_3
   \   000042   8882         MOV     DPL,R0
   \   000044   8983         MOV     DPH,R1
   \   000046   E0           MOVX    A,@DPTR
   \   000047   C4           SWAP    A
   \   000048   540F         ANL     A,#0xf
   \   00004A   F5..         MOV     ?V0 + 0,A
   \   00004C   C3           CLR     C
   \   00004D   940A         SUBB    A,#0xa
   \   00004F   5004         JNC     ??To_string_4
   \   000051   7C30         MOV     R4,#0x30
   \   000053   8002         SJMP    ??To_string_5
   \                     ??To_string_4:
   \   000055   7C37         MOV     R4,#0x37
   \                     ??To_string_5:
   \   000057   EC           MOV     A,R4
   \   000058   25..         ADD     A,?V0 + 0
   \   00005A   C0E0         PUSH    A
   \   00005C   EF           MOV     A,R7
   \   00005D   C3           CLR     C
   \   00005E   33           RLC     A
   \   00005F   FC           MOV     R4,A
   \   000060   E4           CLR     A
   \   000061   33           RLC     A
   \   000062   FD           MOV     R5,A
   \   000063   EA           MOV     A,R2
   \   000064   2C           ADD     A,R4
   \   000065   F582         MOV     DPL,A
   \   000067   EB           MOV     A,R3
   \   000068   3D           ADDC    A,R5
   \   000069   F583         MOV     DPH,A
   \   00006B   D0E0         POP     A
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   8882         MOV     DPL,R0
   \   000070   8983         MOV     DPH,R1
   \   000072   E0           MOVX    A,@DPTR
   \   000073   540F         ANL     A,#0xf
   \   000075   F5..         MOV     ?V0 + 0,A
   \   000077   C3           CLR     C
   \   000078   940A         SUBB    A,#0xa
   \   00007A   50A1         JNC     ??To_string_1
   \   00007C   7C30         MOV     R4,#0x30
   \   00007E   809F         SJMP    ??To_string_2
    638              }
    639          }
   \                     ??To_string_3:
   \   000080                REQUIRE ?Subroutine2
   \   000080                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    640          
    641          /*********************************************************************
    642           * @fn      node_confirm
    643           *
    644           * @brief   
    645           *
    646           * @param   none
    647           *
    648           * @return  none
    649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          void node_confirm(void){
   \                     node_confirm:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    651              uint8 *buf="CFM";
    652              afAddrType_t my_DstAddr;
    653              my_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//设置发送模式为广播
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   740F         MOV     A,#0xf
   \   000011   F0           MOVX    @DPTR,A
    654              my_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;//初始化端口号
   \   000012   7409         MOV     A,#0x9
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7414         MOV     A,#0x14
   \   000019   F0           MOVX    @DPTR,A
    655              my_DstAddr.addr.shortAddr=0xFFFF;
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   12....       LCALL   ?Subroutine4 & 0xFFFF
    656              AF_DataRequest(&my_DstAddr,
    657                             &SampleApp_epDesc,
    658                             SAMPLEAPP_CLUSTERID,
    659                             3,
    660                             buf,
    661                             &SampleApp_TransID,
    662                             AF_DISCV_ROUTE,
    663                             AF_DEFAULT_RADIUS);
   \                     ??CrossCallReturnLabel_5:
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000029   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75....       MOV     ?V0 + 0,#`?<Constant "CFM">` & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(`?<Constant "CFM">` >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..03       MOV     ?V0 + 0,#0x3
   \   00003F   75..00       MOV     ?V0 + 1,#0x0
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..01       MOV     ?V0 + 0,#0x1
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7920         MOV     R1,#0x20
   \   000051   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000053   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000055   7409         MOV     A,#0x9
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
    664              time_cnt=0;
   \   000060   90....       MOV     DPTR,#time_cnt
   \   000063   E4           CLR     A
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   F0           MOVX    @DPTR,A
    665              osal_start_timerEx(SampleApp_TaskID,CO_RESET_EVENT,CO_WAIT_TIME);
   \   000067                ; Setup parameters for call to function osal_start_timerEx
   \   000067   7C10         MOV     R4,#0x10
   \   000069   7D27         MOV     R5,#0x27
   \   00006B   7A02         MOV     R2,#0x2
   \   00006D   FB           MOV     R3,A
   \   00006E   12....       LCALL   ??Subroutine15_0 & 0xFFFF
    666          }
   \                     ??CrossCallReturnLabel_31:
   \   000071   740C         MOV     A,#0xc
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   80..         SJMP    ?Subroutine2
    667          
    668          /*********************************************************************
    669           * @fn      SampleApp_MessageMSGCB
    670           *
    671           * @brief   Data message processor callback.  This function processes
    672           *          any incoming data - probably from other devices.  So, based
    673           *          on cluster ID, perform the intended action.
    674           *
    675           * @param   none
    676           *
    677           * @return  none
    678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    679          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    680          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 54
   \   000005   74CA         MOV     A,#-0x36
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    681              uint8 buffer[50];
    682              switch ( pkt->clusterId ){
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   00001D   6003         JZ      $+5
   \   00001F   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    683                      case SAMPLEAPP_CLUSTERID: 
    684                      osal_memcpy(buffer,pkt->cmd.Data,pkt->cmd.DataLength);
   \   000022                ; Setup parameters for call to function osal_memcpy
   \   000022   EE           MOV     A,R6
   \   000023   2422         ADD     A,#0x22
   \   000025   F582         MOV     DPL,A
   \   000027   EF           MOV     A,R7
   \   000028   3400         ADDC    A,#0x0
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 1,A
   \   000033   75..00       MOV     ?V0 + 2,#0x0
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003B   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00003E   7407         MOV     A,#0x7
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   AA82         MOV     R2,DPL
   \   000045   AB83         MOV     R3,DPH
   \   000047   12....       LCALL   ??osal_memcpy?relay
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
    685                      
    686                      if((buffer[0]=='Y')||(buffer[1]=='E')||(buffer[2]=='S')){
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6459         XRL     A,#0x59
   \   000057   6014         JZ      ??SampleApp_MessageMSGCB_2
   \   000059   7405         MOV     A,#0x5
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6445         XRL     A,#0x45
   \   000061   600A         JZ      ??SampleApp_MessageMSGCB_2
   \   000063   7406         MOV     A,#0x6
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   6453         XRL     A,#0x53
   \   00006B   7006         JNZ     ??SampleApp_MessageMSGCB_3
    687                              child_num++;
   \                     ??SampleApp_MessageMSGCB_2:
   \   00006D   90....       MOV     DPTR,#child_num
   \   000070   E0           MOVX    A,@DPTR
   \   000071   04           INC     A
   \   000072   F0           MOVX    @DPTR,A
    688                      }
    689          
    690                      if(buffer[0]==0xD1){
   \                     ??SampleApp_MessageMSGCB_3:
   \   000073   7404         MOV     A,#0x4
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   E0           MOVX    A,@DPTR
   \   000079   64D1         XRL     A,#0xd1
   \   00007B   705B         JNZ     ??SampleApp_MessageMSGCB_4
    691                              uint8 tmpbbuf[4];
    692                              for(int i=0;i<4;i++){
   \   00007D   7800         MOV     R0,#0x0
   \   00007F   7900         MOV     R1,#0x0
    693                                      tmpbbuf[i]=buffer[i+1];
   \                     ??SampleApp_MessageMSGCB_5:
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   12....       LCALL   ?Subroutine11 & 0xFFFF
    694                              }
   \                     ??CrossCallReturnLabel_19:
   \   000089   C0E0         PUSH    A
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000094   D0E0         POP     A
   \   000096   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000099   40E6         JC      ??SampleApp_MessageMSGCB_5
    695                              if(strcmp(tmpshortaddr,tmpbbuf)!=0){
                                               ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

                      if(strcmp(tmpshortaddr,tmpbbuf)!=0){
                                             ^
"F:\zigbee程序\模块程序v2.0(0525)\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SampleApp\Source\Coordinator.c",695  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   00009B                ; Setup parameters for call to function strcmp
   \   00009B   85..82       MOV     DPL,?XSP + 0
   \   00009E   85..83       MOV     DPH,?XSP + 1
   \   0000A1   AC82         MOV     R4,DPL
   \   0000A3   AD83         MOV     R5,DPH
   \   0000A5   7A..         MOV     R2,#tmpshortaddr & 0xff
   \   0000A7   7B..         MOV     R3,#(tmpshortaddr >> 8) & 0xff
   \   0000A9   12....       LCALL   ??strcmp?relay
   \   0000AC   8B..         MOV     ?V0 + 1,R3
   \   0000AE   EA           MOV     A,R2
   \   0000AF   45..         ORL     A,?V0 + 1
   \   0000B1   6006         JZ      ??SampleApp_MessageMSGCB_6
    696                                      cntnum++;
   \   0000B3   90....       MOV     DPTR,#cntnum
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   04           INC     A
   \   0000B8   F0           MOVX    @DPTR,A
    697                              }
    698                              for(int i=0;i<4;i++){
   \                     ??SampleApp_MessageMSGCB_6:
   \   0000B9   7800         MOV     R0,#0x0
   \   0000BB   7900         MOV     R1,#0x0
    699                                      tmpshortaddr[i]=buffer[i+1];
   \                     ??SampleApp_MessageMSGCB_7:
   \   0000BD   7404         MOV     A,#0x4
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ?Subroutine11 & 0xFFFF
    700                              }
    701                      }
   \                     ??CrossCallReturnLabel_20:
   \   0000C5   C0E0         PUSH    A
   \   0000C7   74..         MOV     A,#tmpshortaddr & 0xff
   \   0000C9   28           ADD     A,R0
   \   0000CA   F582         MOV     DPL,A
   \   0000CC   74..         MOV     A,#(tmpshortaddr >> 8) & 0xff
   \   0000CE   39           ADDC    A,R1
   \   0000CF   F583         MOV     DPH,A
   \   0000D1   D0E0         POP     A
   \   0000D3   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000D6   40E5         JC      ??SampleApp_MessageMSGCB_7
    702                              HalUARTWrite(0,buffer,pkt->cmd.DataLength);
   \                     ??SampleApp_MessageMSGCB_4:
   \   0000D8                ; Setup parameters for call to function HalUARTWrite
   \   0000D8   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000DB   7404         MOV     A,#0x4
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   AA82         MOV     R2,DPL
   \   0000E2   AB83         MOV     R3,DPH
   \   0000E4   7900         MOV     R1,#0x0
   \   0000E6   12....       LCALL   ??HalUARTWrite?relay
    703                      break;   
    704              }
    705          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   0000E9   7436         MOV     A,#0x36
   \   0000EB                REQUIRE ?Subroutine1
   \   0000EB                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EE           MOV     A,R6
   \   000001   2420         ADD     A,#0x20
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FC           MOV     R4,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FD           MOV     R5,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   2401         ADD     A,#0x1
   \   000004   08           INC     R0
   \   000005   E9           MOV     A,R1
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   C3           CLR     C
   \   00000A   E8           MOV     A,R0
   \   00000B   9404         SUBB    A,#0x4
   \   00000D   E9           MOV     A,R1
   \   00000E   9400         SUBB    A,#0x0
   \   000010   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000012   65D0         XRL     A,PSW
   \   000014   33           RLC     A
   \   000015   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Uart_Read?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Uart_Read

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Uart_Write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Uart_Write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??To_string?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    To_string

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??node_confirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    node_confirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "cost">`:
   \   000000   636F7374     DB "cost"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "zbco">`:
   \   000000   7A62636F     DB "zbco"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "COR">`:
   \   000000   434F5200     DB "COR"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "discovery">`:
   \   000000   64697363     DB "discovery"
   \            6F766572
   \            7900    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "join">`:
   \   000000   6A6F696E     DB "join"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "rejoin">`:
   \   000000   72656A6F     DB "rejoin"
   \            696E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "orphan">`:
   \   000000   6F727068     DB "orphan"
   \            616E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "device online as end">`:
   \   000000   64657669     DB "device online as end"
   \            6365206F
   \            6E6C696E
   \            65206173
   \            20656E64
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "device online as rou">`:
   \   000000   64657669     DB "device online as rou"
   \            6365206F
   \            6E6C696E
   \            65206173
   \            20726F75
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "bulid net">`:
   \   000000   62756C69     DB "bulid net"
   \            64206E65
   \            7400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "net ready">`:
   \   000000   6E657420     DB "net ready"
   \            72656164
   \            7900    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "wrong channel">`:
   \   000000   77726F6E     DB "wrong channel"
   \            67206368
   \            616E6E65
   \            6C00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CFM">`:
   \   000000   43464D00     DB "CFM"
    706          
    707          
    708          
    709          /*********************************************************************
    710          *********************************************************************/

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     SampleApp_Init                  0      0     38
       -> afRegister                 0      0     76
       -> HalUARTOpen                0      0     76
       -> HalUARTWrite               0      0     76
     SampleApp_MessageMSGCB          1      0     80
       -> osal_memcpy                0      0    136
       -> strcmp                     0      0    130
       -> HalUARTWrite               0      0    130
     SampleApp_ProcessEvent          0      0     16
       -> osal_msg_receive           0      0     24
       -> HalUARTWrite               0      0     24
       -> HalUARTWrite               0      0     24
       -> osal_set_event             0      0     24
       -> osal_msg_deallocate        0      0     24
       -> osal_msg_receive           0      0     24
       -> SampleApp_MessageMSGCB     0      0     24
       -> node_confirm               0      0     24
       -> osal_start_timerEx         0      0     24
       -> NLME_UpdateNV              0      0     24
       -> osal_nv_item_len           0      0     28
       -> osal_nv_write              0      0     32
       -> osal_start_timerEx         0      0     24
     To_string                       1      0     69
     Uart_Read                       1      0     68
       -> Hal_UART_RxBufLen          0      0    118
       -> HalUARTRead                0      0    118
       -> NLME_GetShortAddr          0      0    118
       -> To_string                  0      0    118
       -> NLME_GetExtAddr            0      0    118
       -> To_string                  0      0    118
       -> osal_memcpy                0      0    124
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> Uart_Write                 0      0    122
       -> AF_DataRequest             0      0    136
       -> Uart_Write                 0      0    122
       -> AF_DataRequest             0      0    136
       -> AF_DataRequest             0      0    136
       -> osal_start_timerEx         0      0    118
       -> HalUARTWrite               0      0    118
       -> AF_DataRequest             0      0    136
       -> NLME_UpdateNV              0      0    118
       -> osal_nv_item_len           0      0    122
       -> osal_nv_write              0      0    126
       -> osal_start_timerEx         0      0    118
       -> AF_DataRequest             0      0    136
     Uart_Write                      1      0    326
       -> HalUARTWrite               0      0    530
     node_confirm                    0      0     43
       -> AF_DataRequest             0      0     62
       -> osal_start_timerEx         0      0     44


   Segment part sizes:

     Function/Label                     Bytes
     --------------                     -----
     _A_IEN0                               1
     WDCTL                                 1
     uart_rdata                          128
     uart_rdlenrightflag                   1
     uart_rdsuccessflag                    1
     uart_rd_enableflag                    1
     uart_rdlen                            1
     uart_rdlentemp                        1
     child_num                             1
     time_cnt                              2
     mypanid                               2
     tmpshortaddr                          4
     cntnum                                1
     sendback_flag                         1
     SampleApp_ClusterList                 4
     SampleApp_SimpleDesc                 12
     SampleApp_epDesc                      6
     SampleApp_TaskID                      1
     SampleApp_TransID                     1
     SampleApp_NwkState                    1
     SampleApp_Init                      119
     ?Subroutine0                          5
     SampleApp_ProcessEvent              301
     ?Subroutine8                          2
     ??Subroutine15_0                      9
     ?Subroutine12                        12
     ?Subroutine5                         15
     Uart_Read                          1511
     ?Subroutine7                         16
     ?Subroutine6                         10
     ?Subroutine10                        10
     ?Subroutine4                          8
     ?Subroutine13                         7
     ?Subroutine1                          8
     Uart_Write                          189
     To_string                           128
     ?Subroutine2                          5
     node_confirm                        120
     SampleApp_MessageMSGCB              235
     ?Subroutine11                         6
     ?Subroutine14                        11
     ?Subroutine9                         16
     ?Subroutine3                         22
     ??SampleApp_Init?relay                6
     ??SampleApp_ProcessEvent?relay        6
     ??Uart_Read?relay                     6
     ??Uart_Write?relay                    6
     ??To_string?relay                     6
     ??node_confirm?relay                  6
     ??SampleApp_MessageMSGCB?relay        6
     ?<Constant "UartInit OK\n">          13
     ?<Constant "cost">                    5
     ?<Constant "zbco">                    5
     ?<Constant "COR">                     4
     ?<Constant "discovery">              10
     ?<Constant "join">                    5
     ?<Constant "rejoin">                  7
     ?<Constant "orphan">                  7
     ?<Constant "device online as end">   21
     ?<Constant "device online as rou">   21
     ?<Constant "bulid net">              10
     ?<Constant "net ready">              10
     ?<Constant "wrong channel">          14
     ?<Constant "CFM">                     4

 
 2 765 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
   152 bytes in segment XDATA_ROM_C
   153 bytes in segment XDATA_Z
 
 2 807 bytes of CODE  memory
   152 bytes of CONST memory
     0 bytes of DATA  memory (+ 2 bytes shared)
   153 bytes of XDATA memory

Errors: none
Warnings: 5
